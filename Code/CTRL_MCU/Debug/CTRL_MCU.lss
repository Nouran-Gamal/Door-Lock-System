
CTRL_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000235c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000235c  000023f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800078  00800078  00002408  2**0
                  ALLOC
  3 .stab         000024a8  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d9  00000000  00000000  000048b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000981c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000997c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__vector_3>
      10:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__vector_8>
      24:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "CTRL_Application.h"
#include <avr/io.h>
#include <avr/delay.h>
#include "uart.h"

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6d 97       	sbiw	r28, 0x1d	; 29
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<SREG_I); // enable I-BIT
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	UART_configType configPtr = {9600,NO_Parity, One_Stop_Bit, Data_8_Bits};
     b68:	ce 01       	movw	r24, r28
     b6a:	02 96       	adiw	r24, 0x02	; 2
     b6c:	9d 8b       	std	Y+21, r25	; 0x15
     b6e:	8c 8b       	std	Y+20, r24	; 0x14
     b70:	e1 e7       	ldi	r30, 0x71	; 113
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ff 8b       	std	Y+23, r31	; 0x17
     b76:	ee 8b       	std	Y+22, r30	; 0x16
     b78:	f7 e0       	ldi	r31, 0x07	; 7
     b7a:	f8 8f       	std	Y+24, r31	; 0x18
     b7c:	ee 89       	ldd	r30, Y+22	; 0x16
     b7e:	ff 89       	ldd	r31, Y+23	; 0x17
     b80:	00 80       	ld	r0, Z
     b82:	8e 89       	ldd	r24, Y+22	; 0x16
     b84:	9f 89       	ldd	r25, Y+23	; 0x17
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	9f 8b       	std	Y+23, r25	; 0x17
     b8a:	8e 8b       	std	Y+22, r24	; 0x16
     b8c:	ec 89       	ldd	r30, Y+20	; 0x14
     b8e:	fd 89       	ldd	r31, Y+21	; 0x15
     b90:	00 82       	st	Z, r0
     b92:	8c 89       	ldd	r24, Y+20	; 0x14
     b94:	9d 89       	ldd	r25, Y+21	; 0x15
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9d 8b       	std	Y+21, r25	; 0x15
     b9a:	8c 8b       	std	Y+20, r24	; 0x14
     b9c:	98 8d       	ldd	r25, Y+24	; 0x18
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	98 8f       	std	Y+24, r25	; 0x18
     ba2:	e8 8d       	ldd	r30, Y+24	; 0x18
     ba4:	ee 23       	and	r30, r30
     ba6:	51 f7       	brne	.-44     	; 0xb7c <main+0x36>
	UART_init(&configPtr);
     ba8:	ce 01       	movw	r24, r28
     baa:	02 96       	adiw	r24, 0x02	; 2
     bac:	0e 94 1e 10 	call	0x203c	; 0x203c <UART_init>

	/* Timer freq = 8MHz/1024, one clock-cycle time = 128 uSecond
	 so to force the timer to produce an interrupt every 1 second:
	 we set the compare value to be 1/(128u) = 7813 */
	Timer_configuration timer_config = { Timer1, CTC, 0, 7813, Prescaler_1024, timerCallBack };
     bb0:	ce 01       	movw	r24, r28
     bb2:	09 96       	adiw	r24, 0x09	; 9
     bb4:	9a 8f       	std	Y+26, r25	; 0x1a
     bb6:	89 8f       	std	Y+25, r24	; 0x19
     bb8:	e8 e6       	ldi	r30, 0x68	; 104
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	fc 8f       	std	Y+28, r31	; 0x1c
     bbe:	eb 8f       	std	Y+27, r30	; 0x1b
     bc0:	f9 e0       	ldi	r31, 0x09	; 9
     bc2:	fd 8f       	std	Y+29, r31	; 0x1d
     bc4:	eb 8d       	ldd	r30, Y+27	; 0x1b
     bc6:	fc 8d       	ldd	r31, Y+28	; 0x1c
     bc8:	00 80       	ld	r0, Z
     bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	9c 8f       	std	Y+28, r25	; 0x1c
     bd2:	8b 8f       	std	Y+27, r24	; 0x1b
     bd4:	e9 8d       	ldd	r30, Y+25	; 0x19
     bd6:	fa 8d       	ldd	r31, Y+26	; 0x1a
     bd8:	00 82       	st	Z, r0
     bda:	89 8d       	ldd	r24, Y+25	; 0x19
     bdc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9a 8f       	std	Y+26, r25	; 0x1a
     be2:	89 8f       	std	Y+25, r24	; 0x19
     be4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	9d 8f       	std	Y+29, r25	; 0x1d
     bea:	ed 8d       	ldd	r30, Y+29	; 0x1d
     bec:	ee 23       	and	r30, r30
     bee:	51 f7       	brne	.-44     	; 0xbc4 <main+0x7e>
	Timer_init(&timer_config);
     bf0:	ce 01       	movw	r24, r28
     bf2:	09 96       	adiw	r24, 0x09	; 9
     bf4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <Timer_init>

	/* initialize I2C */
	TWI_Configurations config = {0x02, TWI_CONTROL_ECU_ADDRESS};
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	8a 8b       	std	Y+18, r24	; 0x12
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	8b 8b       	std	Y+19, r24	; 0x13
	TWI_init(&config);
     c00:	ce 01       	movw	r24, r28
     c02:	42 96       	adiw	r24, 0x12	; 18
     c04:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <TWI_init>

	DcMotor_init();
     c08:	0e 94 9d 08 	call	0x113a	; 0x113a <DcMotor_init>
	BZR_init();
     c0c:	0e 94 77 08 	call	0x10ee	; 0x10ee <BZR_init>

	initializePassword();
     c10:	0e 94 d7 06 	call	0xdae	; 0xdae <initializePassword>

	uint8 receivedByte=0;
     c14:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		if (UART_recieveByte() == READY_TO_SEND){
     c16:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_recieveByte>
     c1a:	85 31       	cpi	r24, 0x15	; 21
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <main+0xd0>
			receivePasswordViaUART(g_receivedPassword);
     c1e:	81 e8       	ldi	r24, 0x81	; 129
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 1d 07 	call	0xe3a	; 0xe3a <receivePasswordViaUART>
			receivedByte = UART_recieveByte();
     c26:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_recieveByte>
     c2a:	89 83       	std	Y+1, r24	; 0x01

			if ( receivedByte == '+'){
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	8b 32       	cpi	r24, 0x2B	; 43
     c30:	69 f5       	brne	.+90     	; 0xc8c <main+0x146>
				if (compare_passwords(g_storedPassword, g_receivedPassword) == PASSWORD_MATCHED){
     c32:	86 e8       	ldi	r24, 0x86	; 134
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	21 e8       	ldi	r18, 0x81	; 129
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	b9 01       	movw	r22, r18
     c3c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <compare_passwords>
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	31 f4       	brne	.+12     	; 0xc50 <main+0x10a>
					UART_sendByte(UNLOCKING_DOOR); /* inform HMI ECU to display that door is unlocking */
     c44:	85 e2       	ldi	r24, 0x25	; 37
     c46:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
					DoorOpeningTask(); /* start opening door process/task */
     c4a:	0e 94 93 06 	call	0xd26	; 0xd26 <DoorOpeningTask>
     c4e:	e3 cf       	rjmp	.-58     	; 0xc16 <main+0xd0>
				}else{
					UART_sendByte(WRONG_PASSWORD);
     c50:	80 e3       	ldi	r24, 0x30	; 48
     c52:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
					/* count number of wrong attempts, and turn on a buzzer of it exceeds the limit */
					g_wrongPasswordCounter++;
     c56:	80 91 78 00 	lds	r24, 0x0078
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	80 93 78 00 	sts	0x0078, r24
					if (g_wrongPasswordCounter == NUMBER_OF_WRONG_PASSWORD_ATTEMPTS){
     c60:	80 91 78 00 	lds	r24, 0x0078
     c64:	83 30       	cpi	r24, 0x03	; 3
     c66:	b9 f6       	brne	.-82     	; 0xc16 <main+0xd0>
						BZR_ON();
     c68:	0e 94 85 08 	call	0x110a	; 0x110a <BZR_ON>
						g_seconds=0;
     c6c:	10 92 7a 00 	sts	0x007A, r1
     c70:	10 92 79 00 	sts	0x0079, r1
						while(g_seconds < ALARM_ON_DELAY); /* turn on alarm for a certain period */
     c74:	80 91 79 00 	lds	r24, 0x0079
     c78:	90 91 7a 00 	lds	r25, 0x007A
     c7c:	83 30       	cpi	r24, 0x03	; 3
     c7e:	91 05       	cpc	r25, r1
     c80:	c8 f3       	brcs	.-14     	; 0xc74 <main+0x12e>
						BZR_OFF();
     c82:	0e 94 91 08 	call	0x1122	; 0x1122 <BZR_OFF>
						g_wrongPasswordCounter=0; /* reset the counter */
     c86:	10 92 78 00 	sts	0x0078, r1
     c8a:	c5 cf       	rjmp	.-118    	; 0xc16 <main+0xd0>
					}
				}


			} else if (receivedByte == CHANGE_PASSWORD_OPTION) {
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	88 31       	cpi	r24, 0x18	; 24
     c90:	11 f6       	brne	.-124    	; 0xc16 <main+0xd0>
				if (compare_passwords(g_storedPassword, g_receivedPassword) == PASSWORD_MATCHED) {
     c92:	86 e8       	ldi	r24, 0x86	; 134
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	21 e8       	ldi	r18, 0x81	; 129
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	b9 01       	movw	r22, r18
     c9c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <compare_passwords>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	31 f4       	brne	.+12     	; 0xcb0 <main+0x16a>
					UART_sendByte(CHANGING_PASSWORD); /* inform HMI to process changing password */
     ca4:	81 e3       	ldi	r24, 0x31	; 49
     ca6:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
					initializePassword();
     caa:	0e 94 d7 06 	call	0xdae	; 0xdae <initializePassword>
     cae:	b3 cf       	rjmp	.-154    	; 0xc16 <main+0xd0>
				}else{
					UART_sendByte(WRONG_PASSWORD);
     cb0:	80 e3       	ldi	r24, 0x30	; 48
     cb2:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
     cb6:	af cf       	rjmp	.-162    	; 0xc16 <main+0xd0>

00000cb8 <compare_passwords>:


/********************************************************/
/* Functions implementations */
/********************************************************/
uint8 compare_passwords(uint8 a_password1[PASSWORD_LENGTH],uint8 a_password2[PASSWORD_LENGTH]) {
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <compare_passwords+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <compare_passwords+0x8>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <compare_passwords+0xa>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	9b 83       	std	Y+3, r25	; 0x03
     cc8:	8a 83       	std	Y+2, r24	; 0x02
     cca:	7d 83       	std	Y+5, r23	; 0x05
     ccc:	6c 83       	std	Y+4, r22	; 0x04
	updateStoredPassword();
     cce:	0e 94 bd 07 	call	0xf7a	; 0xf7a <updateStoredPassword>
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++) {
     cd2:	19 82       	std	Y+1, r1	; 0x01
     cd4:	19 c0       	rjmp	.+50     	; 0xd08 <compare_passwords+0x50>
		if (a_password1[i] != a_password2[i]) {
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	9b 81       	ldd	r25, Y+3	; 0x03
     ce0:	fc 01       	movw	r30, r24
     ce2:	e2 0f       	add	r30, r18
     ce4:	f3 1f       	adc	r31, r19
     ce6:	40 81       	ld	r20, Z
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	fc 01       	movw	r30, r24
     cf4:	e2 0f       	add	r30, r18
     cf6:	f3 1f       	adc	r31, r19
     cf8:	80 81       	ld	r24, Z
     cfa:	48 17       	cp	r20, r24
     cfc:	11 f0       	breq	.+4      	; 0xd02 <compare_passwords+0x4a>
			return PASSWORD_MISMATCHED;
     cfe:	1e 82       	std	Y+6, r1	; 0x06
     d00:	08 c0       	rjmp	.+16     	; 0xd12 <compare_passwords+0x5a>
/* Functions implementations */
/********************************************************/
uint8 compare_passwords(uint8 a_password1[PASSWORD_LENGTH],uint8 a_password2[PASSWORD_LENGTH]) {
	updateStoredPassword();
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++) {
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	85 30       	cpi	r24, 0x05	; 5
     d0c:	20 f3       	brcs	.-56     	; 0xcd6 <compare_passwords+0x1e>
		if (a_password1[i] != a_password2[i]) {
			return PASSWORD_MISMATCHED;
		}
	}
	return PASSWORD_MATCHED;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8e 83       	std	Y+6, r24	; 0x06
     d12:	8e 81       	ldd	r24, Y+6	; 0x06
}
     d14:	26 96       	adiw	r28, 0x06	; 6
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <DoorOpeningTask>:

void DoorOpeningTask(void){
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	/* run the DC motor clockwise for 15 seconds */
	g_seconds = 0;
     d2e:	10 92 7a 00 	sts	0x007A, r1
     d32:	10 92 79 00 	sts	0x0079, r1
	DcMotor_Rotate(CW);
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 b1 08 	call	0x1162	; 0x1162 <DcMotor_Rotate>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
     d3c:	80 91 79 00 	lds	r24, 0x0079
     d40:	90 91 7a 00 	lds	r25, 0x007A
     d44:	85 30       	cpi	r24, 0x05	; 5
     d46:	91 05       	cpc	r25, r1
     d48:	c8 f3       	brcs	.-14     	; 0xd3c <DoorOpeningTask+0x16>

	/* let the door be open for 3 seconds */
	g_seconds = 0;
     d4a:	10 92 7a 00 	sts	0x007A, r1
     d4e:	10 92 79 00 	sts	0x0079, r1
	DcMotor_Rotate(Stop);
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	0e 94 b1 08 	call	0x1162	; 0x1162 <DcMotor_Rotate>
	while (g_seconds < DOOR_LEFT_OPEN_PERIOD);
     d58:	80 91 79 00 	lds	r24, 0x0079
     d5c:	90 91 7a 00 	lds	r25, 0x007A
     d60:	83 30       	cpi	r24, 0x03	; 3
     d62:	91 05       	cpc	r25, r1
     d64:	c8 f3       	brcs	.-14     	; 0xd58 <DoorOpeningTask+0x32>

	/* hold the system for 15 seconds & display to user that door is locking */
	g_seconds = 0;
     d66:	10 92 7a 00 	sts	0x007A, r1
     d6a:	10 92 79 00 	sts	0x0079, r1
	DcMotor_Rotate(ACW);
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	0e 94 b1 08 	call	0x1162	; 0x1162 <DcMotor_Rotate>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
     d74:	80 91 79 00 	lds	r24, 0x0079
     d78:	90 91 7a 00 	lds	r25, 0x007A
     d7c:	85 30       	cpi	r24, 0x05	; 5
     d7e:	91 05       	cpc	r25, r1
     d80:	c8 f3       	brcs	.-14     	; 0xd74 <DoorOpeningTask+0x4e>

	DcMotor_Rotate(Stop);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 b1 08 	call	0x1162	; 0x1162 <DcMotor_Rotate>
}
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <timerCallBack>:

void timerCallBack(void){
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
     d96:	80 91 79 00 	lds	r24, 0x0079
     d9a:	90 91 7a 00 	lds	r25, 0x007A
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	90 93 7a 00 	sts	0x007A, r25
     da4:	80 93 79 00 	sts	0x0079, r24
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <initializePassword>:

void initializePassword(void){
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <initializePassword+0x6>
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <initializePassword+0x8>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <initializePassword+0xa>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
	/* do not return from this function till Control ECU sends a PASSWORD_MATCH signal */
	uint8 confirmationPassword[PASSWORD_LENGTH];
	uint8 check=0;
     dbc:	19 82       	std	Y+1, r1	; 0x01
     dbe:	31 c0       	rjmp	.+98     	; 0xe22 <initializePassword+0x74>
	while(!check){
		while (UART_recieveByte() != READY_TO_SEND); /* wait till HMI gets ready */
     dc0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_recieveByte>
     dc4:	85 31       	cpi	r24, 0x15	; 21
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <initializePassword+0x12>
		UART_sendByte(READY_TO_RECEIVE); /* inform HMI that Control ECU ready to receive the password */
     dc8:	86 e1       	ldi	r24, 0x16	; 22
     dca:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
		receivePasswordViaUART(g_receivedPassword);
     dce:	81 e8       	ldi	r24, 0x81	; 129
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <receivePasswordViaUART>

		while (UART_recieveByte() != READY_TO_SEND);
     dd6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_recieveByte>
     dda:	85 31       	cpi	r24, 0x15	; 21
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <initializePassword+0x28>
		UART_sendByte(READY_TO_RECEIVE); /* inform HMI to send the confirmation password */
     dde:	86 e1       	ldi	r24, 0x16	; 22
     de0:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
		receivePasswordViaUART(confirmationPassword);
     de4:	ce 01       	movw	r24, r28
     de6:	02 96       	adiw	r24, 0x02	; 2
     de8:	0e 94 1d 07 	call	0xe3a	; 0xe3a <receivePasswordViaUART>

		if (compare_passwords(g_receivedPassword, confirmationPassword) == PASSWORD_MATCHED){
     dec:	81 e8       	ldi	r24, 0x81	; 129
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9e 01       	movw	r18, r28
     df2:	2e 5f       	subi	r18, 0xFE	; 254
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	b9 01       	movw	r22, r18
     df8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <compare_passwords>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	59 f4       	brne	.+22     	; 0xe16 <initializePassword+0x68>
			UART_sendByte(READY_TO_SEND);
     e00:	85 e1       	ldi	r24, 0x15	; 21
     e02:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
			UART_sendByte(PASSWORD_MATCHED);
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
			storePassword();
     e0c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <storePassword>
			check=1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <initializePassword+0x74>
		}else{
			UART_sendByte(READY_TO_SEND);
     e16:	85 e1       	ldi	r24, 0x15	; 21
     e18:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
			UART_sendByte(PASSWORD_MISMATCHED);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>

void initializePassword(void){
	/* do not return from this function till Control ECU sends a PASSWORD_MATCH signal */
	uint8 confirmationPassword[PASSWORD_LENGTH];
	uint8 check=0;
	while(!check){
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	88 23       	and	r24, r24
     e26:	61 f2       	breq	.-104    	; 0xdc0 <initializePassword+0x12>
		}else{
			UART_sendByte(READY_TO_SEND);
			UART_sendByte(PASSWORD_MISMATCHED);
		}
	}
}
     e28:	26 96       	adiw	r28, 0x06	; 6
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <receivePasswordViaUART>:

void receivePasswordViaUART(uint8 * passwordArray){
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	61 97       	sbiw	r28, 0x11	; 17
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	99 8b       	std	Y+17, r25	; 0x11
     e54:	88 8b       	std	Y+16, r24	; 0x10
	uint8 cnt;
	for (cnt=0;cnt<PASSWORD_LENGTH;cnt++){
     e56:	1f 86       	std	Y+15, r1	; 0x0f
     e58:	81 c0       	rjmp	.+258    	; 0xf5c <receivePasswordViaUART+0x122>
		*(passwordArray+cnt) = UART_recieveByte();
     e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	88 89       	ldd	r24, Y+16	; 0x10
     e62:	99 89       	ldd	r25, Y+17	; 0x11
     e64:	8c 01       	movw	r16, r24
     e66:	02 0f       	add	r16, r18
     e68:	13 1f       	adc	r17, r19
     e6a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_recieveByte>
     e6e:	f8 01       	movw	r30, r16
     e70:	80 83       	st	Z, r24
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	a8 ec       	ldi	r26, 0xC8	; 200
     e78:	b2 e4       	ldi	r27, 0x42	; 66
     e7a:	8b 87       	std	Y+11, r24	; 0x0b
     e7c:	9c 87       	std	Y+12, r25	; 0x0c
     e7e:	ad 87       	std	Y+13, r26	; 0x0d
     e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e82:	6b 85       	ldd	r22, Y+11	; 0x0b
     e84:	7c 85       	ldd	r23, Y+12	; 0x0c
     e86:	8d 85       	ldd	r24, Y+13	; 0x0d
     e88:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	4a e7       	ldi	r20, 0x7A	; 122
     e90:	53 e4       	ldi	r21, 0x43	; 67
     e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	8f 83       	std	Y+7, r24	; 0x07
     e9c:	98 87       	std	Y+8, r25	; 0x08
     e9e:	a9 87       	std	Y+9, r26	; 0x09
     ea0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea2:	6f 81       	ldd	r22, Y+7	; 0x07
     ea4:	78 85       	ldd	r23, Y+8	; 0x08
     ea6:	89 85       	ldd	r24, Y+9	; 0x09
     ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e8       	ldi	r20, 0x80	; 128
     eb0:	5f e3       	ldi	r21, 0x3F	; 63
     eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb6:	88 23       	and	r24, r24
     eb8:	2c f4       	brge	.+10     	; 0xec4 <receivePasswordViaUART+0x8a>
		__ticks = 1;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9e 83       	std	Y+6, r25	; 0x06
     ec0:	8d 83       	std	Y+5, r24	; 0x05
     ec2:	3f c0       	rjmp	.+126    	; 0xf42 <receivePasswordViaUART+0x108>
	else if (__tmp > 65535)
     ec4:	6f 81       	ldd	r22, Y+7	; 0x07
     ec6:	78 85       	ldd	r23, Y+8	; 0x08
     ec8:	89 85       	ldd	r24, Y+9	; 0x09
     eca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	3f ef       	ldi	r19, 0xFF	; 255
     ed0:	4f e7       	ldi	r20, 0x7F	; 127
     ed2:	57 e4       	ldi	r21, 0x47	; 71
     ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed8:	18 16       	cp	r1, r24
     eda:	4c f5       	brge	.+82     	; 0xf2e <receivePasswordViaUART+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     edc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ede:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e2       	ldi	r20, 0x20	; 32
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	bc 01       	movw	r22, r24
     ef6:	cd 01       	movw	r24, r26
     ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	9e 83       	std	Y+6, r25	; 0x06
     f02:	8d 83       	std	Y+5, r24	; 0x05
     f04:	0f c0       	rjmp	.+30     	; 0xf24 <receivePasswordViaUART+0xea>
     f06:	89 e1       	ldi	r24, 0x19	; 25
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <receivePasswordViaUART+0xd8>
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	9e 81       	ldd	r25, Y+6	; 0x06
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	9e 83       	std	Y+6, r25	; 0x06
     f22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	69 f7       	brne	.-38     	; 0xf06 <receivePasswordViaUART+0xcc>
     f2c:	14 c0       	rjmp	.+40     	; 0xf56 <receivePasswordViaUART+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2e:	6f 81       	ldd	r22, Y+7	; 0x07
     f30:	78 85       	ldd	r23, Y+8	; 0x08
     f32:	89 85       	ldd	r24, Y+9	; 0x09
     f34:	9a 85       	ldd	r25, Y+10	; 0x0a
     f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	9e 83       	std	Y+6, r25	; 0x06
     f40:	8d 83       	std	Y+5, r24	; 0x05
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <receivePasswordViaUART+0x114>
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01
	}
}

void receivePasswordViaUART(uint8 * passwordArray){
	uint8 cnt;
	for (cnt=0;cnt<PASSWORD_LENGTH;cnt++){
     f56:	8f 85       	ldd	r24, Y+15	; 0x0f
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	8f 87       	std	Y+15, r24	; 0x0f
     f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5e:	85 30       	cpi	r24, 0x05	; 5
     f60:	08 f4       	brcc	.+2      	; 0xf64 <receivePasswordViaUART+0x12a>
     f62:	7b cf       	rjmp	.-266    	; 0xe5a <receivePasswordViaUART+0x20>
		*(passwordArray+cnt) = UART_recieveByte();
		_delay_ms(100);
	}
}
     f64:	61 96       	adiw	r28, 0x11	; 17
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	08 95       	ret

00000f7a <updateStoredPassword>:

void updateStoredPassword(void){
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for (i=0;i<PASSWORD_LENGTH;i++){
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	10 c0       	rjmp	.+32     	; 0xfa8 <updateStoredPassword+0x2e>
		EEPROM_readByte(EEPROM_STORE_ADDREESS+i, g_storedPassword+i);
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	48 2f       	mov	r20, r24
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9c 01       	movw	r18, r24
     f96:	2a 57       	subi	r18, 0x7A	; 122
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	ca 01       	movw	r24, r20
     f9c:	b9 01       	movw	r22, r18
     f9e:	0e 94 32 09 	call	0x1264	; 0x1264 <EEPROM_readByte>
	}
}

void updateStoredPassword(void){
	uint8 i;
	for (i=0;i<PASSWORD_LENGTH;i++){
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	85 30       	cpi	r24, 0x05	; 5
     fac:	68 f3       	brcs	.-38     	; 0xf88 <updateStoredPassword+0xe>
		EEPROM_readByte(EEPROM_STORE_ADDREESS+i, g_storedPassword+i);
	}
}
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <storePassword>:

void storePassword(void){
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	2f 97       	sbiw	r28, 0x0f	; 15
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++) {
     fca:	1f 86       	std	Y+15, r1	; 0x0f
     fcc:	83 c0       	rjmp	.+262    	; 0x10d4 <storePassword+0x11e>
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, g_receivedPassword[i]);
     fce:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd0:	48 2f       	mov	r20, r24
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	ef 57       	subi	r30, 0x7F	; 127
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	20 81       	ld	r18, Z
     fe2:	ca 01       	movw	r24, r20
     fe4:	62 2f       	mov	r22, r18
     fe6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <EEPROM_writeByte>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a8 ec       	ldi	r26, 0xC8	; 200
     ff0:	b2 e4       	ldi	r27, 0x42	; 66
     ff2:	8b 87       	std	Y+11, r24	; 0x0b
     ff4:	9c 87       	std	Y+12, r25	; 0x0c
     ff6:	ad 87       	std	Y+13, r26	; 0x0d
     ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1000:	9e 85       	ldd	r25, Y+14	; 0x0e
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4a e7       	ldi	r20, 0x7A	; 122
    1008:	53 e4       	ldi	r21, 0x43	; 67
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	8f 83       	std	Y+7, r24	; 0x07
    1014:	98 87       	std	Y+8, r25	; 0x08
    1016:	a9 87       	std	Y+9, r26	; 0x09
    1018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    101a:	6f 81       	ldd	r22, Y+7	; 0x07
    101c:	78 85       	ldd	r23, Y+8	; 0x08
    101e:	89 85       	ldd	r24, Y+9	; 0x09
    1020:	9a 85       	ldd	r25, Y+10	; 0x0a
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e8       	ldi	r20, 0x80	; 128
    1028:	5f e3       	ldi	r21, 0x3F	; 63
    102a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102e:	88 23       	and	r24, r24
    1030:	2c f4       	brge	.+10     	; 0x103c <storePassword+0x86>
		__ticks = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9e 83       	std	Y+6, r25	; 0x06
    1038:	8d 83       	std	Y+5, r24	; 0x05
    103a:	3f c0       	rjmp	.+126    	; 0x10ba <storePassword+0x104>
	else if (__tmp > 65535)
    103c:	6f 81       	ldd	r22, Y+7	; 0x07
    103e:	78 85       	ldd	r23, Y+8	; 0x08
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	9a 85       	ldd	r25, Y+10	; 0x0a
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	3f ef       	ldi	r19, 0xFF	; 255
    1048:	4f e7       	ldi	r20, 0x7F	; 127
    104a:	57 e4       	ldi	r21, 0x47	; 71
    104c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1050:	18 16       	cp	r1, r24
    1052:	4c f5       	brge	.+82     	; 0x10a6 <storePassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1054:	6b 85       	ldd	r22, Y+11	; 0x0b
    1056:	7c 85       	ldd	r23, Y+12	; 0x0c
    1058:	8d 85       	ldd	r24, Y+13	; 0x0d
    105a:	9e 85       	ldd	r25, Y+14	; 0x0e
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e2       	ldi	r20, 0x20	; 32
    1062:	51 e4       	ldi	r21, 0x41	; 65
    1064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	8d 83       	std	Y+5, r24	; 0x05
    107c:	0f c0       	rjmp	.+30     	; 0x109c <storePassword+0xe6>
    107e:	89 e1       	ldi	r24, 0x19	; 25
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	8b 83       	std	Y+3, r24	; 0x03
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <storePassword+0xd4>
    108e:	9c 83       	std	Y+4, r25	; 0x04
    1090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	69 f7       	brne	.-38     	; 0x107e <storePassword+0xc8>
    10a4:	14 c0       	rjmp	.+40     	; 0x10ce <storePassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a6:	6f 81       	ldd	r22, Y+7	; 0x07
    10a8:	78 85       	ldd	r23, Y+8	; 0x08
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <storePassword+0x110>
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01
	}
}

void storePassword(void){
	uint8 i;
	for (i = 0; i < PASSWORD_LENGTH; i++) {
    10ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	8f 87       	std	Y+15, r24	; 0x0f
    10d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d6:	85 30       	cpi	r24, 0x05	; 5
    10d8:	08 f4       	brcc	.+2      	; 0x10dc <storePassword+0x126>
    10da:	79 cf       	rjmp	.-270    	; 0xfce <storePassword+0x18>
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, g_receivedPassword[i]);
		_delay_ms(100);
	}
}
    10dc:	2f 96       	adiw	r28, 0x0f	; 15
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <BZR_init>:
 *******************************************************************************/

#include "buzzer.h"
#include "gpio.h"

void BZR_init(void){
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	63 e0       	ldi	r22, 0x03	; 3
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_setupPinDirection>
	BZR_OFF();
    1100:	0e 94 91 08 	call	0x1122	; 0x1122 <BZR_OFF>
}
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <BZR_ON>:

void BZR_ON(void){
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	63 e0       	ldi	r22, 0x03	; 3
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <GPIO_writePin>
}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <BZR_OFF>:

void BZR_OFF(void){
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	63 e0       	ldi	r22, 0x03	; 3
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <GPIO_writePin>
}
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <DcMotor_init>:
 *
 *******************************************************************************/

#include "dc_motor.h"

void DcMotor_init(){
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(INPUT_PORT_ID, INPUT1_PIN_ID, PIN_OUTPUT);
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	66 e0       	ldi	r22, 0x06	; 6
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(INPUT_PORT_ID, INPUT2_PIN_ID, PIN_OUTPUT);
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	67 e0       	ldi	r22, 0x07	; 7
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_setupPinDirection>

	DcMotor_Rotate(Stop);
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 b1 08 	call	0x1162	; 0x1162 <DcMotor_Rotate>
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state){
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <DcMotor_Rotate+0x6>
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3b 83       	std	Y+3, r19	; 0x03
    1178:	2a 83       	std	Y+2, r18	; 0x02
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	9b 81       	ldd	r25, Y+3	; 0x03
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	91 05       	cpc	r25, r1
    1182:	f9 f0       	breq	.+62     	; 0x11c2 <DcMotor_Rotate+0x60>
    1184:	2a 81       	ldd	r18, Y+2	; 0x02
    1186:	3b 81       	ldd	r19, Y+3	; 0x03
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	79 f0       	breq	.+30     	; 0x11ac <DcMotor_Rotate+0x4a>
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	01 f5       	brne	.+64     	; 0x11d6 <DcMotor_Rotate+0x74>
	case Stop:
		GPIO_writePin(INPUT_PORT_ID, INPUT1_PIN_ID, LOGIC_LOW);
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	66 e0       	ldi	r22, 0x06	; 6
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <GPIO_writePin>
		GPIO_writePin(INPUT_PORT_ID, INPUT2_PIN_ID, LOGIC_LOW);
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	67 e0       	ldi	r22, 0x07	; 7
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <GPIO_writePin>
    11aa:	15 c0       	rjmp	.+42     	; 0x11d6 <DcMotor_Rotate+0x74>
		break;
	case ACW:
		GPIO_writePin(INPUT_PORT_ID, INPUT1_PIN_ID, LOGIC_HIGH);
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	66 e0       	ldi	r22, 0x06	; 6
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <GPIO_writePin>
		GPIO_writePin(INPUT_PORT_ID, INPUT2_PIN_ID, LOGIC_LOW);
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	67 e0       	ldi	r22, 0x07	; 7
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <GPIO_writePin>
    11c0:	0a c0       	rjmp	.+20     	; 0x11d6 <DcMotor_Rotate+0x74>
		break;
	case CW:
		GPIO_writePin(INPUT_PORT_ID, INPUT1_PIN_ID, LOGIC_LOW);
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	66 e0       	ldi	r22, 0x06	; 6
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <GPIO_writePin>
		GPIO_writePin(INPUT_PORT_ID, INPUT2_PIN_ID, LOGIC_HIGH);
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	67 e0       	ldi	r22, 0x07	; 7
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <GPIO_writePin>
		break;
	}

}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <EEPROM_writeByte+0x6>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <EEPROM_writeByte+0x8>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11f4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11f8:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    11fc:	88 30       	cpi	r24, 0x08	; 8
    11fe:	11 f0       	breq	.+4      	; 0x1204 <EEPROM_writeByte+0x22>
        return ERROR;
    1200:	1c 82       	std	Y+4, r1	; 0x04
    1202:	28 c0       	rjmp	.+80     	; 0x1254 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	80 70       	andi	r24, 0x00	; 0
    120a:	97 70       	andi	r25, 0x07	; 7
    120c:	88 0f       	add	r24, r24
    120e:	89 2f       	mov	r24, r25
    1210:	88 1f       	adc	r24, r24
    1212:	99 0b       	sbc	r25, r25
    1214:	91 95       	neg	r25
    1216:	80 6a       	ori	r24, 0xA0	; 160
    1218:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    121c:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    1220:	88 31       	cpi	r24, 0x18	; 24
    1222:	11 f0       	breq	.+4      	; 0x1228 <EEPROM_writeByte+0x46>
        return ERROR; 
    1224:	1c 82       	std	Y+4, r1	; 0x04
    1226:	16 c0       	rjmp	.+44     	; 0x1254 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    122e:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    1232:	88 32       	cpi	r24, 0x28	; 40
    1234:	11 f0       	breq	.+4      	; 0x123a <EEPROM_writeByte+0x58>
        return ERROR;
    1236:	1c 82       	std	Y+4, r1	; 0x04
    1238:	0d c0       	rjmp	.+26     	; 0x1254 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1240:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    1244:	88 32       	cpi	r24, 0x28	; 40
    1246:	11 f0       	breq	.+4      	; 0x124c <EEPROM_writeByte+0x6a>
        return ERROR;
    1248:	1c 82       	std	Y+4, r1	; 0x04
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    124c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TWI_stop>
	
    return SUCCESS;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	8c 83       	std	Y+4, r24	; 0x04
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <EEPROM_readByte+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <EEPROM_readByte+0x8>
    126c:	0f 92       	push	r0
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	7c 83       	std	Y+4, r23	; 0x04
    1278:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    127a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    127e:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    1282:	88 30       	cpi	r24, 0x08	; 8
    1284:	11 f0       	breq	.+4      	; 0x128a <EEPROM_readByte+0x26>
        return ERROR;
    1286:	1d 82       	std	Y+5, r1	; 0x05
    1288:	44 c0       	rjmp	.+136    	; 0x1312 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	80 70       	andi	r24, 0x00	; 0
    1290:	97 70       	andi	r25, 0x07	; 7
    1292:	88 0f       	add	r24, r24
    1294:	89 2f       	mov	r24, r25
    1296:	88 1f       	adc	r24, r24
    1298:	99 0b       	sbc	r25, r25
    129a:	91 95       	neg	r25
    129c:	80 6a       	ori	r24, 0xA0	; 160
    129e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12a2:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    12a6:	88 31       	cpi	r24, 0x18	; 24
    12a8:	11 f0       	breq	.+4      	; 0x12ae <EEPROM_readByte+0x4a>
        return ERROR;
    12aa:	1d 82       	std	Y+5, r1	; 0x05
    12ac:	32 c0       	rjmp	.+100    	; 0x1312 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12b4:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    12b8:	88 32       	cpi	r24, 0x28	; 40
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <EEPROM_readByte+0x5c>
        return ERROR;
    12bc:	1d 82       	std	Y+5, r1	; 0x05
    12be:	29 c0       	rjmp	.+82     	; 0x1312 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12c0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12c4:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    12c8:	80 31       	cpi	r24, 0x10	; 16
    12ca:	11 f0       	breq	.+4      	; 0x12d0 <EEPROM_readByte+0x6c>
        return ERROR;
    12cc:	1d 82       	std	Y+5, r1	; 0x05
    12ce:	21 c0       	rjmp	.+66     	; 0x1312 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	80 70       	andi	r24, 0x00	; 0
    12d6:	97 70       	andi	r25, 0x07	; 7
    12d8:	88 0f       	add	r24, r24
    12da:	89 2f       	mov	r24, r25
    12dc:	88 1f       	adc	r24, r24
    12de:	99 0b       	sbc	r25, r25
    12e0:	91 95       	neg	r25
    12e2:	81 6a       	ori	r24, 0xA1	; 161
    12e4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12e8:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    12ec:	80 34       	cpi	r24, 0x40	; 64
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <EEPROM_readByte+0x90>
        return ERROR;
    12f0:	1d 82       	std	Y+5, r1	; 0x05
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12f4:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <TWI_readByteWithNACK>
    12f8:	eb 81       	ldd	r30, Y+3	; 0x03
    12fa:	fc 81       	ldd	r31, Y+4	; 0x04
    12fc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12fe:	0e 94 0f 10 	call	0x201e	; 0x201e <TWI_getStatus>
    1302:	88 35       	cpi	r24, 0x58	; 88
    1304:	11 f0       	breq	.+4      	; 0x130a <EEPROM_readByte+0xa6>
        return ERROR;
    1306:	1d 82       	std	Y+5, r1	; 0x05
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    130a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TWI_stop>

    return SUCCESS;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <GPIO_setupPinDirection+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_setupPinDirection+0x8>
    132c:	0f 92       	push	r0
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	6a 83       	std	Y+2, r22	; 0x02
    1336:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	88 30       	cpi	r24, 0x08	; 8
    133c:	08 f0       	brcs	.+2      	; 0x1340 <GPIO_setupPinDirection+0x1c>
    133e:	d5 c0       	rjmp	.+426    	; 0x14ea <GPIO_setupPinDirection+0x1c6>
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	84 30       	cpi	r24, 0x04	; 4
    1344:	08 f0       	brcs	.+2      	; 0x1348 <GPIO_setupPinDirection+0x24>
    1346:	d1 c0       	rjmp	.+418    	; 0x14ea <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3d 83       	std	Y+5, r19	; 0x05
    1350:	2c 83       	std	Y+4, r18	; 0x04
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	91 05       	cpc	r25, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <GPIO_setupPinDirection+0x3a>
    135c:	43 c0       	rjmp	.+134    	; 0x13e4 <GPIO_setupPinDirection+0xc0>
    135e:	2c 81       	ldd	r18, Y+4	; 0x04
    1360:	3d 81       	ldd	r19, Y+5	; 0x05
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	2c f4       	brge	.+10     	; 0x1372 <GPIO_setupPinDirection+0x4e>
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	71 f0       	breq	.+28     	; 0x138c <GPIO_setupPinDirection+0x68>
    1370:	bc c0       	rjmp	.+376    	; 0x14ea <GPIO_setupPinDirection+0x1c6>
    1372:	2c 81       	ldd	r18, Y+4	; 0x04
    1374:	3d 81       	ldd	r19, Y+5	; 0x05
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <GPIO_setupPinDirection+0x5a>
    137c:	5f c0       	rjmp	.+190    	; 0x143c <GPIO_setupPinDirection+0x118>
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	9d 81       	ldd	r25, Y+5	; 0x05
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	91 05       	cpc	r25, r1
    1386:	09 f4       	brne	.+2      	; 0x138a <GPIO_setupPinDirection+0x66>
    1388:	85 c0       	rjmp	.+266    	; 0x1494 <GPIO_setupPinDirection+0x170>
    138a:	af c0       	rjmp	.+350    	; 0x14ea <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	a1 f4       	brne	.+40     	; 0x13ba <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1392:	aa e3       	ldi	r26, 0x3A	; 58
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ea e3       	ldi	r30, 0x3A	; 58
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <GPIO_setupPinDirection+0x8c>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <GPIO_setupPinDirection+0x88>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	98 c0       	rjmp	.+304    	; 0x14ea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13ba:	aa e3       	ldi	r26, 0x3A	; 58
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ea e3       	ldi	r30, 0x3A	; 58
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_setupPinDirection+0xb4>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_setupPinDirection+0xb0>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	83 c0       	rjmp	.+262    	; 0x14ea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	a1 f4       	brne	.+40     	; 0x1412 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13ea:	a7 e3       	ldi	r26, 0x37	; 55
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e7 e3       	ldi	r30, 0x37	; 55
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <GPIO_setupPinDirection+0xe4>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <GPIO_setupPinDirection+0xe0>
    140c:	84 2b       	or	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	6c c0       	rjmp	.+216    	; 0x14ea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1412:	a7 e3       	ldi	r26, 0x37	; 55
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e7 e3       	ldi	r30, 0x37	; 55
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <GPIO_setupPinDirection+0x10c>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <GPIO_setupPinDirection+0x108>
    1434:	80 95       	com	r24
    1436:	84 23       	and	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	57 c0       	rjmp	.+174    	; 0x14ea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	a1 f4       	brne	.+40     	; 0x146a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1442:	a4 e3       	ldi	r26, 0x34	; 52
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e4 e3       	ldi	r30, 0x34	; 52
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_setupPinDirection+0x13c>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_setupPinDirection+0x138>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	40 c0       	rjmp	.+128    	; 0x14ea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    146a:	a4 e3       	ldi	r26, 0x34	; 52
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e4 e3       	ldi	r30, 0x34	; 52
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <GPIO_setupPinDirection+0x164>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <GPIO_setupPinDirection+0x160>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
    1492:	2b c0       	rjmp	.+86     	; 0x14ea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	a1 f4       	brne	.+40     	; 0x14c2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    149a:	a1 e3       	ldi	r26, 0x31	; 49
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e1 e3       	ldi	r30, 0x31	; 49
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <GPIO_setupPinDirection+0x194>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <GPIO_setupPinDirection+0x190>
    14bc:	84 2b       	or	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14c2:	a1 e3       	ldi	r26, 0x31	; 49
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e1 e3       	ldi	r30, 0x31	; 49
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <GPIO_setupPinDirection+0x1bc>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <GPIO_setupPinDirection+0x1b8>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	2d 97       	sbiw	r28, 0x0d	; 13
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	6a 83       	std	Y+2, r22	; 0x02
    1512:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	85 30       	cpi	r24, 0x05	; 5
    1518:	08 f0       	brcs	.+2      	; 0x151c <GPIO_writePin+0x22>
    151a:	db c0       	rjmp	.+438    	; 0x16d2 <GPIO_writePin+0x1d8>
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	89 30       	cpi	r24, 0x09	; 9
    1520:	08 f0       	brcs	.+2      	; 0x1524 <GPIO_writePin+0x2a>
    1522:	d7 c0       	rjmp	.+430    	; 0x16d2 <GPIO_writePin+0x1d8>
		/*do nothing*/
	}
	else{
		switch (port_num) {
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3d 87       	std	Y+13, r19	; 0x0d
    152c:	2c 87       	std	Y+12, r18	; 0x0c
    152e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1530:	9d 85       	ldd	r25, Y+13	; 0x0d
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	09 f4       	brne	.+2      	; 0x153a <GPIO_writePin+0x40>
    1538:	44 c0       	rjmp	.+136    	; 0x15c2 <GPIO_writePin+0xc8>
    153a:	2c 85       	ldd	r18, Y+12	; 0x0c
    153c:	3d 85       	ldd	r19, Y+13	; 0x0d
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	2c f4       	brge	.+10     	; 0x154e <GPIO_writePin+0x54>
    1544:	8c 85       	ldd	r24, Y+12	; 0x0c
    1546:	9d 85       	ldd	r25, Y+13	; 0x0d
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	71 f0       	breq	.+28     	; 0x1568 <GPIO_writePin+0x6e>
    154c:	c2 c0       	rjmp	.+388    	; 0x16d2 <GPIO_writePin+0x1d8>
    154e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1550:	3d 85       	ldd	r19, Y+13	; 0x0d
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	09 f4       	brne	.+2      	; 0x155a <GPIO_writePin+0x60>
    1558:	62 c0       	rjmp	.+196    	; 0x161e <GPIO_writePin+0x124>
    155a:	8c 85       	ldd	r24, Y+12	; 0x0c
    155c:	9d 85       	ldd	r25, Y+13	; 0x0d
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	91 05       	cpc	r25, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <GPIO_writePin+0x6c>
    1564:	89 c0       	rjmp	.+274    	; 0x1678 <GPIO_writePin+0x17e>
    1566:	b5 c0       	rjmp	.+362    	; 0x16d2 <GPIO_writePin+0x1d8>
		case PORTA_ID:
			value ? SET_BIT(PORTA, pin_num) : CLEAR_BIT(PORTA, pin_num);
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	88 23       	and	r24, r24
    156c:	a9 f0       	breq	.+42     	; 0x1598 <GPIO_writePin+0x9e>
    156e:	ab e3       	ldi	r26, 0x3B	; 59
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	eb e3       	ldi	r30, 0x3B	; 59
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_writePin+0x92>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_writePin+0x8e>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	9c 91       	ld	r25, X
    1596:	9d c0       	rjmp	.+314    	; 0x16d2 <GPIO_writePin+0x1d8>
    1598:	ab e3       	ldi	r26, 0x3B	; 59
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e3       	ldi	r30, 0x3B	; 59
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_writePin+0xba>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	2a 95       	dec	r18
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_writePin+0xb6>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	2c 91       	ld	r18, X
    15c0:	88 c0       	rjmp	.+272    	; 0x16d2 <GPIO_writePin+0x1d8>
			break;
		case PORTB_ID:
			value ? SET_BIT(PORTB, pin_num) : CLEAR_BIT(PORTB, pin_num);
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	88 23       	and	r24, r24
    15c6:	a9 f0       	breq	.+42     	; 0x15f2 <GPIO_writePin+0xf8>
    15c8:	a8 e3       	ldi	r26, 0x38	; 56
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e8 e3       	ldi	r30, 0x38	; 56
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <GPIO_writePin+0xec>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <GPIO_writePin+0xe8>
    15ea:	84 2b       	or	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	3c 91       	ld	r19, X
    15f0:	70 c0       	rjmp	.+224    	; 0x16d2 <GPIO_writePin+0x1d8>
    15f2:	a8 e3       	ldi	r26, 0x38	; 56
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e3       	ldi	r30, 0x38	; 56
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_writePin+0x116>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_writePin+0x112>
    1614:	80 95       	com	r24
    1616:	84 23       	and	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	8c 91       	ld	r24, X
    161c:	5a c0       	rjmp	.+180    	; 0x16d2 <GPIO_writePin+0x1d8>
			break;
		case PORTC_ID:
			value ? SET_BIT(PORTC, pin_num) : CLEAR_BIT(PORTC, pin_num);
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 23       	and	r24, r24
    1622:	a9 f0       	breq	.+42     	; 0x164e <GPIO_writePin+0x154>
    1624:	a5 e3       	ldi	r26, 0x35	; 53
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <GPIO_writePin+0x148>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <GPIO_writePin+0x144>
    1646:	84 2b       	or	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	9c 91       	ld	r25, X
    164c:	42 c0       	rjmp	.+132    	; 0x16d2 <GPIO_writePin+0x1d8>
    164e:	a5 e3       	ldi	r26, 0x35	; 53
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e5 e3       	ldi	r30, 0x35	; 53
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 c0       	rjmp	.+4      	; 0x166a <GPIO_writePin+0x170>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	2a 95       	dec	r18
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <GPIO_writePin+0x16c>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	2c 91       	ld	r18, X
    1676:	2d c0       	rjmp	.+90     	; 0x16d2 <GPIO_writePin+0x1d8>
			break;
		case PORTD_ID:
			value ? SET_BIT(PORTD, pin_num) : CLEAR_BIT(PORTD, pin_num);
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	88 23       	and	r24, r24
    167c:	a9 f0       	breq	.+42     	; 0x16a8 <GPIO_writePin+0x1ae>
    167e:	a2 e3       	ldi	r26, 0x32	; 50
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e2 e3       	ldi	r30, 0x32	; 50
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <GPIO_writePin+0x1a2>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <GPIO_writePin+0x19e>
    16a0:	84 2b       	or	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	3c 91       	ld	r19, X
    16a6:	15 c0       	rjmp	.+42     	; 0x16d2 <GPIO_writePin+0x1d8>
    16a8:	a2 e3       	ldi	r26, 0x32	; 50
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e2 e3       	ldi	r30, 0x32	; 50
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_writePin+0x1cc>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_writePin+0x1c8>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	8c 91       	ld	r24, X
			break;
		}
	}
}
    16d2:	2d 96       	adiw	r28, 0x0d	; 13
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_readPin+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_readPin+0x8>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_readPin+0xa>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	85 30       	cpi	r24, 0x05	; 5
    16fa:	18 f4       	brcc	.+6      	; 0x1702 <GPIO_readPin+0x1e>
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	89 30       	cpi	r24, 0x09	; 9
    1700:	10 f0       	brcs	.+4      	; 0x1706 <GPIO_readPin+0x22>
			return LOGIC_LOW;
    1702:	1d 82       	std	Y+5, r1	; 0x05
    1704:	68 c0       	rjmp	.+208    	; 0x17d6 <GPIO_readPin+0xf2>
	}
	else{
		switch(port_num){
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3c 83       	std	Y+4, r19	; 0x04
    170e:	2b 83       	std	Y+3, r18	; 0x03
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	91 05       	cpc	r25, r1
    1718:	39 f1       	breq	.+78     	; 0x1768 <GPIO_readPin+0x84>
    171a:	2b 81       	ldd	r18, Y+3	; 0x03
    171c:	3c 81       	ldd	r19, Y+4	; 0x04
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	2c f4       	brge	.+10     	; 0x172e <GPIO_readPin+0x4a>
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	61 f0       	breq	.+24     	; 0x1744 <GPIO_readPin+0x60>
    172c:	53 c0       	rjmp	.+166    	; 0x17d4 <GPIO_readPin+0xf0>
    172e:	2b 81       	ldd	r18, Y+3	; 0x03
    1730:	3c 81       	ldd	r19, Y+4	; 0x04
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	51 f1       	breq	.+84     	; 0x178c <GPIO_readPin+0xa8>
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	91 05       	cpc	r25, r1
    1740:	b9 f1       	breq	.+110    	; 0x17b0 <GPIO_readPin+0xcc>
    1742:	48 c0       	rjmp	.+144    	; 0x17d4 <GPIO_readPin+0xf0>
		case PORTA_ID:
			return BIT_IS_SET(PINA,pin_num);
    1744:	e9 e3       	ldi	r30, 0x39	; 57
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <GPIO_readPin+0x7a>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <GPIO_readPin+0x76>
    1762:	84 23       	and	r24, r20
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	37 c0       	rjmp	.+110    	; 0x17d6 <GPIO_readPin+0xf2>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num);
    1768:	e6 e3       	ldi	r30, 0x36	; 54
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <GPIO_readPin+0x9e>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <GPIO_readPin+0x9a>
    1786:	84 23       	and	r24, r20
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	25 c0       	rjmp	.+74     	; 0x17d6 <GPIO_readPin+0xf2>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num);
    178c:	e3 e3       	ldi	r30, 0x33	; 51
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <GPIO_readPin+0xc2>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <GPIO_readPin+0xbe>
    17aa:	84 23       	and	r24, r20
    17ac:	8d 83       	std	Y+5, r24	; 0x05
    17ae:	13 c0       	rjmp	.+38     	; 0x17d6 <GPIO_readPin+0xf2>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num);
    17b0:	e0 e3       	ldi	r30, 0x30	; 48
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <GPIO_readPin+0xe6>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <GPIO_readPin+0xe2>
    17ce:	84 23       	and	r24, r20
    17d0:	8d 83       	std	Y+5, r24	; 0x05
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <GPIO_readPin+0xf2>
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <GPIO_readPin+0xf6>
			break;
		}
	}
}
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8e 81       	ldd	r24, Y+6	; 0x06
    17dc:	26 96       	adiw	r28, 0x06	; 6
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <GPIO_setupPortDirection+0x6>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <GPIO_setupPortDirection+0x8>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	90 f5       	brcc	.+100    	; 0x1868 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3c 83       	std	Y+4, r19	; 0x04
    180c:	2b 83       	std	Y+3, r18	; 0x03
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	91 05       	cpc	r25, r1
    1816:	d1 f0       	breq	.+52     	; 0x184c <GPIO_setupPortDirection+0x5e>
    1818:	2b 81       	ldd	r18, Y+3	; 0x03
    181a:	3c 81       	ldd	r19, Y+4	; 0x04
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	2c f4       	brge	.+10     	; 0x182c <GPIO_setupPortDirection+0x3e>
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	61 f0       	breq	.+24     	; 0x1842 <GPIO_setupPortDirection+0x54>
    182a:	1e c0       	rjmp	.+60     	; 0x1868 <GPIO_setupPortDirection+0x7a>
    182c:	2b 81       	ldd	r18, Y+3	; 0x03
    182e:	3c 81       	ldd	r19, Y+4	; 0x04
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	81 f0       	breq	.+32     	; 0x1856 <GPIO_setupPortDirection+0x68>
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	81 f0       	breq	.+32     	; 0x1860 <GPIO_setupPortDirection+0x72>
    1840:	13 c0       	rjmp	.+38     	; 0x1868 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1842:	ea e3       	ldi	r30, 0x3A	; 58
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 83       	st	Z, r24
    184a:	0e c0       	rjmp	.+28     	; 0x1868 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    184c:	e7 e3       	ldi	r30, 0x37	; 55
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 83       	st	Z, r24
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1856:	e4 e3       	ldi	r30, 0x34	; 52
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	80 83       	st	Z, r24
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1860:	e1 e3       	ldi	r30, 0x31	; 49
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	80 83       	st	Z, r24
			break;
		}
	}
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <GPIO_writePort+0x6>
    187c:	00 d0       	rcall	.+0      	; 0x187e <GPIO_writePort+0x8>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num > NUM_OF_PORTS){
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	85 30       	cpi	r24, 0x05	; 5
    188a:	90 f5       	brcc	.+100    	; 0x18f0 <GPIO_writePort+0x7a>
		/*do nothing*/
	}
	else{
		switch(port_num){
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	3c 83       	std	Y+4, r19	; 0x04
    1894:	2b 83       	std	Y+3, r18	; 0x03
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	91 05       	cpc	r25, r1
    189e:	d1 f0       	breq	.+52     	; 0x18d4 <GPIO_writePort+0x5e>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	22 30       	cpi	r18, 0x02	; 2
    18a6:	31 05       	cpc	r19, r1
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <GPIO_writePort+0x3e>
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	61 f0       	breq	.+24     	; 0x18ca <GPIO_writePort+0x54>
    18b2:	1e c0       	rjmp	.+60     	; 0x18f0 <GPIO_writePort+0x7a>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	3c 81       	ldd	r19, Y+4	; 0x04
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	81 f0       	breq	.+32     	; 0x18de <GPIO_writePort+0x68>
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	91 05       	cpc	r25, r1
    18c6:	81 f0       	breq	.+32     	; 0x18e8 <GPIO_writePort+0x72>
    18c8:	13 c0       	rjmp	.+38     	; 0x18f0 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    18ca:	eb e3       	ldi	r30, 0x3B	; 59
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	80 83       	st	Z, r24
    18d2:	0e c0       	rjmp	.+28     	; 0x18f0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18d4:	e8 e3       	ldi	r30, 0x38	; 56
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	80 83       	st	Z, r24
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18de:	e5 e3       	ldi	r30, 0x35	; 53
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	80 83       	st	Z, r24
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18e8:	e2 e3       	ldi	r30, 0x32	; 50
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <GPIO_readPort+0x6>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <GPIO_readPort+0x8>
    1906:	0f 92       	push	r0
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	89 83       	std	Y+1, r24	; 0x01
	if (port_num > NUM_OF_PORTS ) {
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	85 30       	cpi	r24, 0x05	; 5
    1912:	10 f0       	brcs	.+4      	; 0x1918 <GPIO_readPort+0x1a>
		return 0;
    1914:	1c 82       	std	Y+4, r1	; 0x04
    1916:	34 c0       	rjmp	.+104    	; 0x1980 <GPIO_readPort+0x82>
	} else {
		switch (port_num) {
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	3b 83       	std	Y+3, r19	; 0x03
    1920:	2a 83       	std	Y+2, r18	; 0x02
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	9b 81       	ldd	r25, Y+3	; 0x03
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	d1 f0       	breq	.+52     	; 0x1960 <GPIO_readPort+0x62>
    192c:	2a 81       	ldd	r18, Y+2	; 0x02
    192e:	3b 81       	ldd	r19, Y+3	; 0x03
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	2c f4       	brge	.+10     	; 0x1940 <GPIO_readPort+0x42>
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f0       	breq	.+24     	; 0x1956 <GPIO_readPort+0x58>
    193e:	1f c0       	rjmp	.+62     	; 0x197e <GPIO_readPort+0x80>
    1940:	2a 81       	ldd	r18, Y+2	; 0x02
    1942:	3b 81       	ldd	r19, Y+3	; 0x03
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	81 f0       	breq	.+32     	; 0x196a <GPIO_readPort+0x6c>
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	9b 81       	ldd	r25, Y+3	; 0x03
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <GPIO_readPort+0x76>
    1954:	14 c0       	rjmp	.+40     	; 0x197e <GPIO_readPort+0x80>
		case PORTA_ID:
			return (PINA & 0xFF);
    1956:	e9 e3       	ldi	r30, 0x39	; 57
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	90 81       	ld	r25, Z
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	10 c0       	rjmp	.+32     	; 0x1980 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			return (PINB & 0xFF);
    1960:	e6 e3       	ldi	r30, 0x36	; 54
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	20 81       	ld	r18, Z
    1966:	2c 83       	std	Y+4, r18	; 0x04
    1968:	0b c0       	rjmp	.+22     	; 0x1980 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			return (PINC & 0xFF);
    196a:	e3 e3       	ldi	r30, 0x33	; 51
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	30 81       	ld	r19, Z
    1970:	3c 83       	std	Y+4, r19	; 0x04
    1972:	06 c0       	rjmp	.+12     	; 0x1980 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			return (PIND & 0xFF);
    1974:	e0 e3       	ldi	r30, 0x30	; 48
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	8c 83       	std	Y+4, r24	; 0x04
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <GPIO_readPort+0x82>
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <GPIO_readPort+0x86>
			break;
		}
	}
}
    1980:	9c 81       	ldd	r25, Y+4	; 0x04
    1982:	9d 83       	std	Y+5, r25	; 0x05
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <__vector_9>:
/*******************************************************************************/
                                  /* ISRs */
/*******************************************************************************/

/* Timer0 overflow*/
ISR(TIMER0_OVF_vect) {
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	2f 93       	push	r18
    19a2:	3f 93       	push	r19
    19a4:	4f 93       	push	r20
    19a6:	5f 93       	push	r21
    19a8:	6f 93       	push	r22
    19aa:	7f 93       	push	r23
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	af 93       	push	r26
    19b2:	bf 93       	push	r27
    19b4:	ef 93       	push	r30
    19b6:	ff 93       	push	r31
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    19c0:	80 91 7b 00 	lds	r24, 0x007B
    19c4:	90 91 7c 00 	lds	r25, 0x007C
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <__vector_9+0x40>
		(*g_Timer0CallBackPtr)();
    19cc:	e0 91 7b 00 	lds	r30, 0x007B
    19d0:	f0 91 7c 00 	lds	r31, 0x007C
    19d4:	09 95       	icall
	}
}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	0f 90       	pop	r0
    19f8:	1f 90       	pop	r1
    19fa:	18 95       	reti

000019fc <__vector_19>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
    19fc:	1f 92       	push	r1
    19fe:	0f 92       	push	r0
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	0f 92       	push	r0
    1a04:	11 24       	eor	r1, r1
    1a06:	2f 93       	push	r18
    1a08:	3f 93       	push	r19
    1a0a:	4f 93       	push	r20
    1a0c:	5f 93       	push	r21
    1a0e:	6f 93       	push	r22
    1a10:	7f 93       	push	r23
    1a12:	8f 93       	push	r24
    1a14:	9f 93       	push	r25
    1a16:	af 93       	push	r26
    1a18:	bf 93       	push	r27
    1a1a:	ef 93       	push	r30
    1a1c:	ff 93       	push	r31
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    1a26:	80 91 7b 00 	lds	r24, 0x007B
    1a2a:	90 91 7c 00 	lds	r25, 0x007C
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	29 f0       	breq	.+10     	; 0x1a3c <__vector_19+0x40>
		(*g_Timer0CallBackPtr)();
    1a32:	e0 91 7b 00 	lds	r30, 0x007B
    1a36:	f0 91 7c 00 	lds	r31, 0x007C
    1a3a:	09 95       	icall
	}
}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	bf 91       	pop	r27
    1a46:	af 91       	pop	r26
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <__vector_8>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
    1a62:	1f 92       	push	r1
    1a64:	0f 92       	push	r0
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	0f 92       	push	r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	2f 93       	push	r18
    1a6e:	3f 93       	push	r19
    1a70:	4f 93       	push	r20
    1a72:	5f 93       	push	r21
    1a74:	6f 93       	push	r22
    1a76:	7f 93       	push	r23
    1a78:	8f 93       	push	r24
    1a7a:	9f 93       	push	r25
    1a7c:	af 93       	push	r26
    1a7e:	bf 93       	push	r27
    1a80:	ef 93       	push	r30
    1a82:	ff 93       	push	r31
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    1a8c:	80 91 7d 00 	lds	r24, 0x007D
    1a90:	90 91 7e 00 	lds	r25, 0x007E
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	29 f0       	breq	.+10     	; 0x1aa2 <__vector_8+0x40>
		(*g_Timer1CallBackPtr)();
    1a98:	e0 91 7d 00 	lds	r30, 0x007D
    1a9c:	f0 91 7e 00 	lds	r31, 0x007E
    1aa0:	09 95       	icall
	}
}
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	ff 91       	pop	r31
    1aa8:	ef 91       	pop	r30
    1aaa:	bf 91       	pop	r27
    1aac:	af 91       	pop	r26
    1aae:	9f 91       	pop	r25
    1ab0:	8f 91       	pop	r24
    1ab2:	7f 91       	pop	r23
    1ab4:	6f 91       	pop	r22
    1ab6:	5f 91       	pop	r21
    1ab8:	4f 91       	pop	r20
    1aba:	3f 91       	pop	r19
    1abc:	2f 91       	pop	r18
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	0f 90       	pop	r0
    1ac4:	1f 90       	pop	r1
    1ac6:	18 95       	reti

00001ac8 <__vector_6>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
    1ac8:	1f 92       	push	r1
    1aca:	0f 92       	push	r0
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	0f 92       	push	r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	2f 93       	push	r18
    1ad4:	3f 93       	push	r19
    1ad6:	4f 93       	push	r20
    1ad8:	5f 93       	push	r21
    1ada:	6f 93       	push	r22
    1adc:	7f 93       	push	r23
    1ade:	8f 93       	push	r24
    1ae0:	9f 93       	push	r25
    1ae2:	af 93       	push	r26
    1ae4:	bf 93       	push	r27
    1ae6:	ef 93       	push	r30
    1ae8:	ff 93       	push	r31
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    1af2:	80 91 7d 00 	lds	r24, 0x007D
    1af6:	90 91 7e 00 	lds	r25, 0x007E
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	29 f0       	breq	.+10     	; 0x1b08 <__vector_6+0x40>
		(*g_Timer1CallBackPtr)();
    1afe:	e0 91 7d 00 	lds	r30, 0x007D
    1b02:	f0 91 7e 00 	lds	r31, 0x007E
    1b06:	09 95       	icall
	}
}
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	0f 90       	pop	r0
    1b2a:	1f 90       	pop	r1
    1b2c:	18 95       	reti

00001b2e <__vector_4>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	5f 93       	push	r21
    1b40:	6f 93       	push	r22
    1b42:	7f 93       	push	r23
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1b58:	80 91 7f 00 	lds	r24, 0x007F
    1b5c:	90 91 80 00 	lds	r25, 0x0080
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	29 f0       	breq	.+10     	; 0x1b6e <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    1b64:	e0 91 7f 00 	lds	r30, 0x007F
    1b68:	f0 91 80 00 	lds	r31, 0x0080
    1b6c:	09 95       	icall
	}
}
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	ff 91       	pop	r31
    1b74:	ef 91       	pop	r30
    1b76:	bf 91       	pop	r27
    1b78:	af 91       	pop	r26
    1b7a:	9f 91       	pop	r25
    1b7c:	8f 91       	pop	r24
    1b7e:	7f 91       	pop	r23
    1b80:	6f 91       	pop	r22
    1b82:	5f 91       	pop	r21
    1b84:	4f 91       	pop	r20
    1b86:	3f 91       	pop	r19
    1b88:	2f 91       	pop	r18
    1b8a:	0f 90       	pop	r0
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	0f 90       	pop	r0
    1b90:	1f 90       	pop	r1
    1b92:	18 95       	reti

00001b94 <__vector_3>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
    1b94:	1f 92       	push	r1
    1b96:	0f 92       	push	r0
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	0f 92       	push	r0
    1b9c:	11 24       	eor	r1, r1
    1b9e:	2f 93       	push	r18
    1ba0:	3f 93       	push	r19
    1ba2:	4f 93       	push	r20
    1ba4:	5f 93       	push	r21
    1ba6:	6f 93       	push	r22
    1ba8:	7f 93       	push	r23
    1baa:	8f 93       	push	r24
    1bac:	9f 93       	push	r25
    1bae:	af 93       	push	r26
    1bb0:	bf 93       	push	r27
    1bb2:	ef 93       	push	r30
    1bb4:	ff 93       	push	r31
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1bbe:	80 91 7f 00 	lds	r24, 0x007F
    1bc2:	90 91 80 00 	lds	r25, 0x0080
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	29 f0       	breq	.+10     	; 0x1bd4 <__vector_3+0x40>
		(*g_Timer2CallBackPtr)();
    1bca:	e0 91 7f 00 	lds	r30, 0x007F
    1bce:	f0 91 80 00 	lds	r31, 0x0080
    1bd2:	09 95       	icall
	}
}
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	ff 91       	pop	r31
    1bda:	ef 91       	pop	r30
    1bdc:	bf 91       	pop	r27
    1bde:	af 91       	pop	r26
    1be0:	9f 91       	pop	r25
    1be2:	8f 91       	pop	r24
    1be4:	7f 91       	pop	r23
    1be6:	6f 91       	pop	r22
    1be8:	5f 91       	pop	r21
    1bea:	4f 91       	pop	r20
    1bec:	3f 91       	pop	r19
    1bee:	2f 91       	pop	r18
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	0f 90       	pop	r0
    1bf6:	1f 90       	pop	r1
    1bf8:	18 95       	reti

00001bfa <Timer_init>:

/*******************************************************************************/
                         /* Functions Implementation */
/*******************************************************************************/

void Timer_init(const Timer_configuration *timer_config){
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <Timer_init+0x6>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
    1c08:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 23       	and	r24, r24
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <Timer_init+0x1a>
    1c12:	59 c0       	rjmp	.+178    	; 0x1cc6 <Timer_init+0xcc>
		/* starting with adjusting common bits for the timer, then mode-specific bits */

		SET_BIT(TCCR0,FOC0); /* for non-PWM */
    1c14:	a3 e5       	ldi	r26, 0x53	; 83
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e3 e5       	ldi	r30, 0x53	; 83
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 68       	ori	r24, 0x80	; 128
    1c20:	8c 93       	st	X, r24
		TCNT0 = timer_config->initialValue;
    1c22:	a2 e5       	ldi	r26, 0x52	; 82
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	8c 93       	st	X, r24
		TCCR0 = 0;
    1c30:	e3 e5       	ldi	r30, 0x53	; 83
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
    1c36:	a3 e5       	ldi	r26, 0x53	; 83
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e3 e5       	ldi	r30, 0x53	; 83
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	90 81       	ld	r25, Z
    1c40:	e9 81       	ldd	r30, Y+1	; 0x01
    1c42:	fa 81       	ldd	r31, Y+2	; 0x02
    1c44:	86 81       	ldd	r24, Z+6	; 0x06
    1c46:	89 2b       	or	r24, r25
    1c48:	8c 93       	st	X, r24

		if (timer_config->mode == Normal){
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	81 81       	ldd	r24, Z+1	; 0x01
    1c50:	88 23       	and	r24, r24
    1c52:	79 f4       	brne	.+30     	; 0x1c72 <Timer_init+0x78>
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    1c54:	a9 e5       	ldi	r26, 0x59	; 89
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e9 e5       	ldi	r30, 0x59	; 89
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	81 60       	ori	r24, 0x01	; 1
    1c60:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    1c62:	a8 e5       	ldi	r26, 0x58	; 88
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e8 e5       	ldi	r30, 0x58	; 88
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	81 60       	ori	r24, 0x01	; 1
    1c6e:	8c 93       	st	X, r24
    1c70:	21 c0       	rjmp	.+66     	; 0x1cb4 <Timer_init+0xba>

		}else if (timer_config->mode == CTC){
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	81 81       	ldd	r24, Z+1	; 0x01
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	e1 f4       	brne	.+56     	; 0x1cb4 <Timer_init+0xba>
			SET_BIT(TCCR0,WGM01);
    1c7c:	a3 e5       	ldi	r26, 0x53	; 83
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e3 e5       	ldi	r30, 0x53	; 83
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	88 60       	ori	r24, 0x08	; 8
    1c88:	8c 93       	st	X, r24
			OCR0 = timer_config->compareValue;
    1c8a:	ac e5       	ldi	r26, 0x5C	; 92
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c90:	fa 81       	ldd	r31, Y+2	; 0x02
    1c92:	84 81       	ldd	r24, Z+4	; 0x04
    1c94:	95 81       	ldd	r25, Z+5	; 0x05
    1c96:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    1c98:	a9 e5       	ldi	r26, 0x59	; 89
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e9 e5       	ldi	r30, 0x59	; 89
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	82 60       	ori	r24, 0x02	; 2
    1ca4:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    1ca6:	a8 e5       	ldi	r26, 0x58	; 88
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e8 e5       	ldi	r30, 0x58	; 88
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	82 60       	ori	r24, 0x02	; 2
    1cb2:	8c 93       	st	X, r24
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */
    1cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb8:	87 81       	ldd	r24, Z+7	; 0x07
    1cba:	90 85       	ldd	r25, Z+8	; 0x08
    1cbc:	90 93 7c 00 	sts	0x007C, r25
    1cc0:	80 93 7b 00 	sts	0x007B, r24
    1cc4:	c4 c0       	rjmp	.+392    	; 0x1e4e <Timer_init+0x254>


	}else if (timer_config->timer_ID == Timer1){
    1cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cca:	80 81       	ld	r24, Z
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <Timer_init+0xd8>
    1cd0:	60 c0       	rjmp	.+192    	; 0x1d92 <Timer_init+0x198>
		TCCR1A =0;
    1cd2:	ef e4       	ldi	r30, 0x4F	; 79
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    1cd8:	af e4       	ldi	r26, 0x4F	; 79
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	ef e4       	ldi	r30, 0x4F	; 79
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	88 60       	ori	r24, 0x08	; 8
    1ce4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1ce6:	af e4       	ldi	r26, 0x4F	; 79
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	ef e4       	ldi	r30, 0x4F	; 79
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	84 60       	ori	r24, 0x04	; 4
    1cf2:	8c 93       	st	X, r24
		TCCR1B = timer_config->prescaler;
    1cf4:	ae e4       	ldi	r26, 0x4E	; 78
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfc:	86 81       	ldd	r24, Z+6	; 0x06
    1cfe:	8c 93       	st	X, r24
		TCNT1 = timer_config->initialValue;
    1d00:	ac e4       	ldi	r26, 0x4C	; 76
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e9 81       	ldd	r30, Y+1	; 0x01
    1d06:	fa 81       	ldd	r31, Y+2	; 0x02
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	11 96       	adiw	r26, 0x01	; 1
    1d0e:	9c 93       	st	X, r25
    1d10:	8e 93       	st	-X, r24

		if (timer_config->mode == Normal) {
    1d12:	e9 81       	ldd	r30, Y+1	; 0x01
    1d14:	fa 81       	ldd	r31, Y+2	; 0x02
    1d16:	81 81       	ldd	r24, Z+1	; 0x01
    1d18:	88 23       	and	r24, r24
    1d1a:	79 f4       	brne	.+30     	; 0x1d3a <Timer_init+0x140>
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    1d1c:	a9 e5       	ldi	r26, 0x59	; 89
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e9 e5       	ldi	r30, 0x59	; 89
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	84 60       	ori	r24, 0x04	; 4
    1d28:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    1d2a:	a8 e5       	ldi	r26, 0x58	; 88
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e8 e5       	ldi	r30, 0x58	; 88
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	84 60       	ori	r24, 0x04	; 4
    1d36:	8c 93       	st	X, r24
    1d38:	23 c0       	rjmp	.+70     	; 0x1d80 <Timer_init+0x186>

		} else if (timer_config->mode == CTC) {
    1d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3e:	81 81       	ldd	r24, Z+1	; 0x01
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	f1 f4       	brne	.+60     	; 0x1d80 <Timer_init+0x186>
			SET_BIT(TCCR1B, WGM12);
    1d44:	ae e4       	ldi	r26, 0x4E	; 78
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	ee e4       	ldi	r30, 0x4E	; 78
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 60       	ori	r24, 0x08	; 8
    1d50:	8c 93       	st	X, r24
			OCR1A = timer_config->compareValue;
    1d52:	aa e4       	ldi	r26, 0x4A	; 74
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e9 81       	ldd	r30, Y+1	; 0x01
    1d58:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5a:	84 81       	ldd	r24, Z+4	; 0x04
    1d5c:	95 81       	ldd	r25, Z+5	; 0x05
    1d5e:	11 96       	adiw	r26, 0x01	; 1
    1d60:	9c 93       	st	X, r25
    1d62:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    1d64:	a9 e5       	ldi	r26, 0x59	; 89
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e9 e5       	ldi	r30, 0x59	; 89
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 61       	ori	r24, 0x10	; 16
    1d70:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    1d72:	a8 e5       	ldi	r26, 0x58	; 88
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e8 e5       	ldi	r30, 0x58	; 88
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	80 61       	ori	r24, 0x10	; 16
    1d7e:	8c 93       	st	X, r24
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
    1d80:	e9 81       	ldd	r30, Y+1	; 0x01
    1d82:	fa 81       	ldd	r31, Y+2	; 0x02
    1d84:	87 81       	ldd	r24, Z+7	; 0x07
    1d86:	90 85       	ldd	r25, Z+8	; 0x08
    1d88:	90 93 7e 00 	sts	0x007E, r25
    1d8c:	80 93 7d 00 	sts	0x007D, r24
    1d90:	5e c0       	rjmp	.+188    	; 0x1e4e <Timer_init+0x254>


	}else if (timer_config->timer_ID == Timer2){
    1d92:	e9 81       	ldd	r30, Y+1	; 0x01
    1d94:	fa 81       	ldd	r31, Y+2	; 0x02
    1d96:	80 81       	ld	r24, Z
    1d98:	82 30       	cpi	r24, 0x02	; 2
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <Timer_init+0x1a4>
    1d9c:	58 c0       	rjmp	.+176    	; 0x1e4e <Timer_init+0x254>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    1d9e:	a5 e4       	ldi	r26, 0x45	; 69
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 e4       	ldi	r30, 0x45	; 69
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 68       	ori	r24, 0x80	; 128
    1daa:	8c 93       	st	X, r24
		TCNT2 = timer_config->initialValue;
    1dac:	a4 e4       	ldi	r26, 0x44	; 68
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e9 81       	ldd	r30, Y+1	; 0x01
    1db2:	fa 81       	ldd	r31, Y+2	; 0x02
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	8c 93       	st	X, r24
		TCCR2 = 0;
    1dba:	e5 e4       	ldi	r30, 0x45	; 69
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
    1dc0:	a5 e4       	ldi	r26, 0x45	; 69
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e5 e4       	ldi	r30, 0x45	; 69
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	90 81       	ld	r25, Z
    1dca:	e9 81       	ldd	r30, Y+1	; 0x01
    1dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dce:	86 81       	ldd	r24, Z+6	; 0x06
    1dd0:	89 2b       	or	r24, r25
    1dd2:	8c 93       	st	X, r24

		if (timer_config->mode == Normal) {
    1dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd8:	81 81       	ldd	r24, Z+1	; 0x01
    1dda:	88 23       	and	r24, r24
    1ddc:	79 f4       	brne	.+30     	; 0x1dfc <Timer_init+0x202>
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    1dde:	a9 e5       	ldi	r26, 0x59	; 89
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 e5       	ldi	r30, 0x59	; 89
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	80 64       	ori	r24, 0x40	; 64
    1dea:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    1dec:	a8 e5       	ldi	r26, 0x58	; 88
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e8 e5       	ldi	r30, 0x58	; 88
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	80 64       	ori	r24, 0x40	; 64
    1df8:	8c 93       	st	X, r24
    1dfa:	21 c0       	rjmp	.+66     	; 0x1e3e <Timer_init+0x244>

		} else if (timer_config->mode == CTC) {
    1dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1e00:	81 81       	ldd	r24, Z+1	; 0x01
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	e1 f4       	brne	.+56     	; 0x1e3e <Timer_init+0x244>
			SET_BIT(TCCR0, WGM21);
    1e06:	a3 e5       	ldi	r26, 0x53	; 83
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e3 e5       	ldi	r30, 0x53	; 83
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 60       	ori	r24, 0x08	; 8
    1e12:	8c 93       	st	X, r24
			OCR2 = timer_config->compareValue;
    1e14:	a3 e4       	ldi	r26, 0x43	; 67
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	84 81       	ldd	r24, Z+4	; 0x04
    1e1e:	95 81       	ldd	r25, Z+5	; 0x05
    1e20:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    1e22:	a9 e5       	ldi	r26, 0x59	; 89
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e9 e5       	ldi	r30, 0x59	; 89
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 68       	ori	r24, 0x80	; 128
    1e2e:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    1e30:	a8 e5       	ldi	r26, 0x58	; 88
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e8 e5       	ldi	r30, 0x58	; 88
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	80 68       	ori	r24, 0x80	; 128
    1e3c:	8c 93       	st	X, r24
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
    1e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e40:	fa 81       	ldd	r31, Y+2	; 0x02
    1e42:	87 81       	ldd	r24, Z+7	; 0x07
    1e44:	90 85       	ldd	r25, Z+8	; 0x08
    1e46:	90 93 80 00 	sts	0x0080, r25
    1e4a:	80 93 7f 00 	sts	0x007F, r24
	}
}
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <Timer_deInit>:


void Timer_deInit(Timer_ID timer_ID){
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	0f 92       	push	r0
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	88 23       	and	r24, r24
    1e68:	e1 f4       	brne	.+56     	; 0x1ea2 <Timer_deInit+0x4a>
		TCCR0 = 0;
    1e6a:	e3 e5       	ldi	r30, 0x53	; 83
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    1e70:	e2 e5       	ldi	r30, 0x52	; 82
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    1e76:	ec e5       	ldi	r30, 0x5C	; 92
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    1e7c:	a9 e5       	ldi	r26, 0x59	; 89
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e9 e5       	ldi	r30, 0x59	; 89
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8d 7f       	andi	r24, 0xFD	; 253
    1e88:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    1e8a:	a9 e5       	ldi	r26, 0x59	; 89
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e9 e5       	ldi	r30, 0x59	; 89
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	8e 7f       	andi	r24, 0xFE	; 254
    1e96:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    1e98:	10 92 7c 00 	sts	0x007C, r1
    1e9c:	10 92 7b 00 	sts	0x007B, r1
    1ea0:	42 c0       	rjmp	.+132    	; 0x1f26 <Timer_deInit+0xce>

	}else if (timer_ID == Timer1){
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	09 f5       	brne	.+66     	; 0x1eea <Timer_deInit+0x92>
		TCCR1A =0;
    1ea8:	ef e4       	ldi	r30, 0x4F	; 79
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    1eae:	ee e4       	ldi	r30, 0x4E	; 78
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	10 82       	st	Z, r1
		TCNT1 = 0;
    1eb4:	ec e4       	ldi	r30, 0x4C	; 76
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	11 82       	std	Z+1, r1	; 0x01
    1eba:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    1ebc:	a9 e5       	ldi	r26, 0x59	; 89
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e9 e5       	ldi	r30, 0x59	; 89
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8b 7f       	andi	r24, 0xFB	; 251
    1ec8:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    1eca:	ea e4       	ldi	r30, 0x4A	; 74
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	11 82       	std	Z+1, r1	; 0x01
    1ed0:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    1ed2:	a9 e5       	ldi	r26, 0x59	; 89
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e9 e5       	ldi	r30, 0x59	; 89
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8f 7e       	andi	r24, 0xEF	; 239
    1ede:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    1ee0:	10 92 7e 00 	sts	0x007E, r1
    1ee4:	10 92 7d 00 	sts	0x007D, r1
    1ee8:	1e c0       	rjmp	.+60     	; 0x1f26 <Timer_deInit+0xce>

	}else if (timer_ID == Timer2){
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	82 30       	cpi	r24, 0x02	; 2
    1eee:	d9 f4       	brne	.+54     	; 0x1f26 <Timer_deInit+0xce>
		TCCR2 = 0;
    1ef0:	e5 e4       	ldi	r30, 0x45	; 69
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    1ef6:	e4 e4       	ldi	r30, 0x44	; 68
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    1efc:	e3 e4       	ldi	r30, 0x43	; 67
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    1f02:	a9 e5       	ldi	r26, 0x59	; 89
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e9 e5       	ldi	r30, 0x59	; 89
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8f 77       	andi	r24, 0x7F	; 127
    1f0e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    1f10:	a9 e5       	ldi	r26, 0x59	; 89
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e9 e5       	ldi	r30, 0x59	; 89
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8f 7b       	andi	r24, 0xBF	; 191
    1f1c:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    1f1e:	10 92 80 00 	sts	0x0080, r1
    1f22:	10 92 7f 00 	sts	0x007F, r1
	}
}
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_Configurations * config)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <TWI_init+0x6>
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    TWBR = config->bitRate;
    1f3c:	a0 e2       	ldi	r26, 0x20	; 32
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e9 81       	ldd	r30, Y+1	; 0x01
    1f42:	fa 81       	ldd	r31, Y+2	; 0x02
    1f44:	80 81       	ld	r24, Z
    1f46:	8c 93       	st	X, r24
	TWSR = 0x00; /* using no prescaler */
    1f48:	e1 e2       	ldi	r30, 0x21	; 33
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((config->slaveAddress) <<1);
    1f4e:	a2 e2       	ldi	r26, 0x22	; 34
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e9 81       	ldd	r30, Y+1	; 0x01
    1f54:	fa 81       	ldd	r31, Y+2	; 0x02
    1f56:	81 81       	ldd	r24, Z+1	; 0x01
    1f58:	88 0f       	add	r24, r24
    1f5a:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1f5c:	e6 e5       	ldi	r30, 0x56	; 86
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	84 e0       	ldi	r24, 0x04	; 4
    1f62:	80 83       	st	Z, r24
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <TWI_start>:

void TWI_start(void)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f76:	e6 e5       	ldi	r30, 0x56	; 86
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	84 ea       	ldi	r24, 0xA4	; 164
    1f7c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f7e:	e6 e5       	ldi	r30, 0x56	; 86
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	88 23       	and	r24, r24
    1f86:	dc f7       	brge	.-10     	; 0x1f7e <TWI_start+0x10>
}
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <TWI_stop>:

void TWI_stop(void)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f96:	e6 e5       	ldi	r30, 0x56	; 86
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	84 e9       	ldi	r24, 0x94	; 148
    1f9c:	80 83       	st	Z, r24
}
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1fb0:	e3 e2       	ldi	r30, 0x23	; 35
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1fb8:	e6 e5       	ldi	r30, 0x56	; 86
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	84 e8       	ldi	r24, 0x84	; 132
    1fbe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fc0:	e6 e5       	ldi	r30, 0x56	; 86
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 23       	and	r24, r24
    1fc8:	dc f7       	brge	.-10     	; 0x1fc0 <TWI_writeByte+0x1c>
}
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1fda:	e6 e5       	ldi	r30, 0x56	; 86
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	84 ec       	ldi	r24, 0xC4	; 196
    1fe0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fe2:	e6 e5       	ldi	r30, 0x56	; 86
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	88 23       	and	r24, r24
    1fea:	dc f7       	brge	.-10     	; 0x1fe2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1fec:	e3 e2       	ldi	r30, 0x23	; 35
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
}
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2000:	e6 e5       	ldi	r30, 0x56	; 86
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	84 e8       	ldi	r24, 0x84	; 132
    2006:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2008:	e6 e5       	ldi	r30, 0x56	; 86
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	88 23       	and	r24, r24
    2010:	dc f7       	brge	.-10     	; 0x2008 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2012:	e3 e2       	ldi	r30, 0x23	; 35
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
}
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2028:	e1 e2       	ldi	r30, 0x21	; 33
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	88 7f       	andi	r24, 0xF8	; 248
    2030:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2032:	89 81       	ldd	r24, Y+1	; 0x01
}
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_configType * configPtr)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <UART_init+0x6>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <UART_init+0x8>
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    204c:	1a 82       	std	Y+2, r1	; 0x02
    204e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2050:	eb e2       	ldi	r30, 0x2B	; 43
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2058:	ea e2       	ldi	r30, 0x2A	; 42
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	88 e1       	ldi	r24, 0x18	; 24
    205e:	80 83       	st	Z, r24
	 * UPM1:0  = parity bit
	 * USBS    = stop bit number
	 * UCSZ1:0 = data bits mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= ((configPtr->parityConfig) << UPM0);
    2060:	a0 e4       	ldi	r26, 0x40	; 64
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e0 e4       	ldi	r30, 0x40	; 64
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	28 2f       	mov	r18, r24
    206c:	eb 81       	ldd	r30, Y+3	; 0x03
    206e:	fc 81       	ldd	r31, Y+4	; 0x04
    2070:	84 81       	ldd	r24, Z+4	; 0x04
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	82 95       	swap	r24
    2078:	92 95       	swap	r25
    207a:	90 7f       	andi	r25, 0xF0	; 240
    207c:	98 27       	eor	r25, r24
    207e:	80 7f       	andi	r24, 0xF0	; 240
    2080:	98 27       	eor	r25, r24
    2082:	82 2b       	or	r24, r18
    2084:	8c 93       	st	X, r24
	UCSRC |= ((configPtr->stopBitConfig) << USBS);
    2086:	a0 e4       	ldi	r26, 0x40	; 64
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e0 e4       	ldi	r30, 0x40	; 64
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	28 2f       	mov	r18, r24
    2092:	eb 81       	ldd	r30, Y+3	; 0x03
    2094:	fc 81       	ldd	r31, Y+4	; 0x04
    2096:	85 81       	ldd	r24, Z+5	; 0x05
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	82 2b       	or	r24, r18
    20aa:	8c 93       	st	X, r24
	
	CLEAR_BIT(UCSRC,UCSZ0);
    20ac:	a0 e4       	ldi	r26, 0x40	; 64
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e0 e4       	ldi	r30, 0x40	; 64
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8d 7f       	andi	r24, 0xFD	; 253
    20b8:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1);
    20ba:	a0 e4       	ldi	r26, 0x40	; 64
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e0 e4       	ldi	r30, 0x40	; 64
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	8b 7f       	andi	r24, 0xFB	; 251
    20c6:	8c 93       	st	X, r24
	if (configPtr->dataType != Data_9_Bits){
    20c8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ca:	fc 81       	ldd	r31, Y+4	; 0x04
    20cc:	86 81       	ldd	r24, Z+6	; 0x06
    20ce:	87 30       	cpi	r24, 0x07	; 7
    20d0:	81 f0       	breq	.+32     	; 0x20f2 <UART_init+0xb6>
		UCSRC |= ((configPtr->dataType) << UCSZ0);
    20d2:	a0 e4       	ldi	r26, 0x40	; 64
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e0 e4       	ldi	r30, 0x40	; 64
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	28 2f       	mov	r18, r24
    20de:	eb 81       	ldd	r30, Y+3	; 0x03
    20e0:	fc 81       	ldd	r31, Y+4	; 0x04
    20e2:	86 81       	ldd	r24, Z+6	; 0x06
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	82 2b       	or	r24, r18
    20ee:	8c 93       	st	X, r24
    20f0:	15 c0       	rjmp	.+42     	; 0x211c <UART_init+0xe0>
	}else{
		SET_BIT(UCSRC,UCSZ0);
    20f2:	a0 e4       	ldi	r26, 0x40	; 64
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e0 e4       	ldi	r30, 0x40	; 64
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	82 60       	ori	r24, 0x02	; 2
    20fe:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2100:	a0 e4       	ldi	r26, 0x40	; 64
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e0 e4       	ldi	r30, 0x40	; 64
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	84 60       	ori	r24, 0x04	; 4
    210c:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    210e:	aa e2       	ldi	r26, 0x2A	; 42
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ea e2       	ldi	r30, 0x2A	; 42
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	84 60       	ori	r24, 0x04	; 4
    211a:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((configPtr->baud_rate) * 8UL))) - 1);
    211c:	eb 81       	ldd	r30, Y+3	; 0x03
    211e:	fc 81       	ldd	r31, Y+4	; 0x04
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	a2 81       	ldd	r26, Z+2	; 0x02
    2126:	b3 81       	ldd	r27, Z+3	; 0x03
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	aa 1f       	adc	r26, r26
    212e:	bb 1f       	adc	r27, r27
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	aa 1f       	adc	r26, r26
    2136:	bb 1f       	adc	r27, r27
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	aa 1f       	adc	r26, r26
    213e:	bb 1f       	adc	r27, r27
    2140:	9c 01       	movw	r18, r24
    2142:	ad 01       	movw	r20, r26
    2144:	80 e4       	ldi	r24, 0x40	; 64
    2146:	92 e4       	ldi	r25, 0x42	; 66
    2148:	af e0       	ldi	r26, 0x0F	; 15
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodsi4>
    2154:	da 01       	movw	r26, r20
    2156:	c9 01       	movw	r24, r18
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    215e:	e0 e4       	ldi	r30, 0x40	; 64
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	89 2f       	mov	r24, r25
    2168:	99 27       	eor	r25, r25
    216a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    216c:	e9 e2       	ldi	r30, 0x29	; 41
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	80 83       	st	Z, r24
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	0f 92       	push	r0
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    218e:	eb e2       	ldi	r30, 0x2B	; 43
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	80 72       	andi	r24, 0x20	; 32
    219a:	90 70       	andi	r25, 0x00	; 0
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	b9 f3       	breq	.-18     	; 0x218e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    21a0:	ec e2       	ldi	r30, 0x2C	; 44
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    21b8:	eb e2       	ldi	r30, 0x2B	; 43
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	88 23       	and	r24, r24
    21c0:	dc f7       	brge	.-10     	; 0x21b8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    21c2:	ec e2       	ldi	r30, 0x2C	; 44
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
}
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <UART_sendString+0x6>
    21d4:	0f 92       	push	r0
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	9b 83       	std	Y+3, r25	; 0x03
    21dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21de:	19 82       	std	Y+1, r1	; 0x01
    21e0:	0e c0       	rjmp	.+28     	; 0x21fe <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	9b 81       	ldd	r25, Y+3	; 0x03
    21ec:	fc 01       	movw	r30, r24
    21ee:	e2 0f       	add	r30, r18
    21f0:	f3 1f       	adc	r31, r19
    21f2:	80 81       	ld	r24, Z
    21f4:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_sendByte>
		i++;
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	9b 81       	ldd	r25, Y+3	; 0x03
    2208:	fc 01       	movw	r30, r24
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	80 81       	ld	r24, Z
    2210:	88 23       	and	r24, r24
    2212:	39 f7       	brne	.-50     	; 0x21e2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	00 d0       	rcall	.+0      	; 0x222a <UART_receiveString+0xa>
    222a:	0f 92       	push	r0
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	9b 83       	std	Y+3, r25	; 0x03
    2232:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2234:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	8c 01       	movw	r16, r24
    2242:	02 0f       	add	r16, r18
    2244:	13 1f       	adc	r17, r19
    2246:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_recieveByte>
    224a:	f8 01       	movw	r30, r16
    224c:	80 83       	st	Z, r24
    224e:	0f c0       	rjmp	.+30     	; 0x226e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	8f 5f       	subi	r24, 0xFF	; 255
    2254:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	9b 81       	ldd	r25, Y+3	; 0x03
    2260:	8c 01       	movw	r16, r24
    2262:	02 0f       	add	r16, r18
    2264:	13 1f       	adc	r17, r19
    2266:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_recieveByte>
    226a:	f8 01       	movw	r30, r16
    226c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	9b 81       	ldd	r25, Y+3	; 0x03
    2278:	fc 01       	movw	r30, r24
    227a:	e2 0f       	add	r30, r18
    227c:	f3 1f       	adc	r31, r19
    227e:	80 81       	ld	r24, Z
    2280:	83 32       	cpi	r24, 0x23	; 35
    2282:	31 f7       	brne	.-52     	; 0x2250 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	9b 81       	ldd	r25, Y+3	; 0x03
    228e:	fc 01       	movw	r30, r24
    2290:	e2 0f       	add	r30, r18
    2292:	f3 1f       	adc	r31, r19
    2294:	10 82       	st	Z, r1
}
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	08 95       	ret

000022a6 <__udivmodsi4>:
    22a6:	a1 e2       	ldi	r26, 0x21	; 33
    22a8:	1a 2e       	mov	r1, r26
    22aa:	aa 1b       	sub	r26, r26
    22ac:	bb 1b       	sub	r27, r27
    22ae:	fd 01       	movw	r30, r26
    22b0:	0d c0       	rjmp	.+26     	; 0x22cc <__udivmodsi4_ep>

000022b2 <__udivmodsi4_loop>:
    22b2:	aa 1f       	adc	r26, r26
    22b4:	bb 1f       	adc	r27, r27
    22b6:	ee 1f       	adc	r30, r30
    22b8:	ff 1f       	adc	r31, r31
    22ba:	a2 17       	cp	r26, r18
    22bc:	b3 07       	cpc	r27, r19
    22be:	e4 07       	cpc	r30, r20
    22c0:	f5 07       	cpc	r31, r21
    22c2:	20 f0       	brcs	.+8      	; 0x22cc <__udivmodsi4_ep>
    22c4:	a2 1b       	sub	r26, r18
    22c6:	b3 0b       	sbc	r27, r19
    22c8:	e4 0b       	sbc	r30, r20
    22ca:	f5 0b       	sbc	r31, r21

000022cc <__udivmodsi4_ep>:
    22cc:	66 1f       	adc	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	1a 94       	dec	r1
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <__udivmodsi4_loop>
    22d8:	60 95       	com	r22
    22da:	70 95       	com	r23
    22dc:	80 95       	com	r24
    22de:	90 95       	com	r25
    22e0:	9b 01       	movw	r18, r22
    22e2:	ac 01       	movw	r20, r24
    22e4:	bd 01       	movw	r22, r26
    22e6:	cf 01       	movw	r24, r30
    22e8:	08 95       	ret

000022ea <__prologue_saves__>:
    22ea:	2f 92       	push	r2
    22ec:	3f 92       	push	r3
    22ee:	4f 92       	push	r4
    22f0:	5f 92       	push	r5
    22f2:	6f 92       	push	r6
    22f4:	7f 92       	push	r7
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	ca 1b       	sub	r28, r26
    2314:	db 0b       	sbc	r29, r27
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	09 94       	ijmp

00002322 <__epilogue_restores__>:
    2322:	2a 88       	ldd	r2, Y+18	; 0x12
    2324:	39 88       	ldd	r3, Y+17	; 0x11
    2326:	48 88       	ldd	r4, Y+16	; 0x10
    2328:	5f 84       	ldd	r5, Y+15	; 0x0f
    232a:	6e 84       	ldd	r6, Y+14	; 0x0e
    232c:	7d 84       	ldd	r7, Y+13	; 0x0d
    232e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2330:	9b 84       	ldd	r9, Y+11	; 0x0b
    2332:	aa 84       	ldd	r10, Y+10	; 0x0a
    2334:	b9 84       	ldd	r11, Y+9	; 0x09
    2336:	c8 84       	ldd	r12, Y+8	; 0x08
    2338:	df 80       	ldd	r13, Y+7	; 0x07
    233a:	ee 80       	ldd	r14, Y+6	; 0x06
    233c:	fd 80       	ldd	r15, Y+5	; 0x05
    233e:	0c 81       	ldd	r16, Y+4	; 0x04
    2340:	1b 81       	ldd	r17, Y+3	; 0x03
    2342:	aa 81       	ldd	r26, Y+2	; 0x02
    2344:	b9 81       	ldd	r27, Y+1	; 0x01
    2346:	ce 0f       	add	r28, r30
    2348:	d1 1d       	adc	r29, r1
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	ed 01       	movw	r28, r26
    2356:	08 95       	ret

00002358 <_exit>:
    2358:	f8 94       	cli

0000235a <__stop_program>:
    235a:	ff cf       	rjmp	.-2      	; 0x235a <__stop_program>
