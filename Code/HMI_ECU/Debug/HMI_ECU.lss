
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ebe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  00002ebe  00002f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080013a  0080013a  0000302c  2**0
                  ALLOC
  3 .stab         00002aa8  00000000  00000000  0000302c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012dc  00000000  00000000  00005ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a944  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ad31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b4ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__vector_3>
      10:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__vector_8>
      24:	0c 94 be 12 	jmp	0x257c	; 0x257c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 34       	cpi	r26, 0x48	; 72
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e2       	ldi	r26, 0x22	; 34
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e2       	ldi	r24, 0x22	; 34
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "HMI_Application.h"
#include <avr/io.h>
#include <avr/delay.h>


int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e8 97       	sbiw	r28, 0x38	; 56
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<SREG_I); // enable I-BIT
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	UART_configType configPtr = {9600,NO_Parity, One_Stop_Bit, Data_8_Bits};
     b68:	ce 01       	movw	r24, r28
     b6a:	4f 96       	adiw	r24, 0x1f	; 31
     b6c:	98 ab       	std	Y+48, r25	; 0x30
     b6e:	8f a7       	std	Y+47, r24	; 0x2f
     b70:	e3 e3       	ldi	r30, 0x33	; 51
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	fa ab       	std	Y+50, r31	; 0x32
     b76:	e9 ab       	std	Y+49, r30	; 0x31
     b78:	f7 e0       	ldi	r31, 0x07	; 7
     b7a:	fb ab       	std	Y+51, r31	; 0x33
     b7c:	e9 a9       	ldd	r30, Y+49	; 0x31
     b7e:	fa a9       	ldd	r31, Y+50	; 0x32
     b80:	00 80       	ld	r0, Z
     b82:	89 a9       	ldd	r24, Y+49	; 0x31
     b84:	9a a9       	ldd	r25, Y+50	; 0x32
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	9a ab       	std	Y+50, r25	; 0x32
     b8a:	89 ab       	std	Y+49, r24	; 0x31
     b8c:	ef a5       	ldd	r30, Y+47	; 0x2f
     b8e:	f8 a9       	ldd	r31, Y+48	; 0x30
     b90:	00 82       	st	Z, r0
     b92:	8f a5       	ldd	r24, Y+47	; 0x2f
     b94:	98 a9       	ldd	r25, Y+48	; 0x30
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	98 ab       	std	Y+48, r25	; 0x30
     b9a:	8f a7       	std	Y+47, r24	; 0x2f
     b9c:	9b a9       	ldd	r25, Y+51	; 0x33
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	9b ab       	std	Y+51, r25	; 0x33
     ba2:	eb a9       	ldd	r30, Y+51	; 0x33
     ba4:	ee 23       	and	r30, r30
     ba6:	51 f7       	brne	.-44     	; 0xb7c <main+0x36>
	UART_init(&configPtr);
     ba8:	ce 01       	movw	r24, r28
     baa:	4f 96       	adiw	r24, 0x1f	; 31
     bac:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <UART_init>

	/* Timer freq = 8MHz/1024, one clock-cycle time = 128 uSecond
	so to force the timer to produce an interrupt every 1 second:
	we set the compare value to be 1/(128u) = 7813 */
	Timer_configuration timer_config = {Timer1, CTC,0, 7813, Prescaler_1024, timerCallBack};
     bb0:	ce 01       	movw	r24, r28
     bb2:	86 96       	adiw	r24, 0x26	; 38
     bb4:	9d ab       	std	Y+53, r25	; 0x35
     bb6:	8c ab       	std	Y+52, r24	; 0x34
     bb8:	ea e2       	ldi	r30, 0x2A	; 42
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	ff ab       	std	Y+55, r31	; 0x37
     bbe:	ee ab       	std	Y+54, r30	; 0x36
     bc0:	f9 e0       	ldi	r31, 0x09	; 9
     bc2:	f8 af       	std	Y+56, r31	; 0x38
     bc4:	ee a9       	ldd	r30, Y+54	; 0x36
     bc6:	ff a9       	ldd	r31, Y+55	; 0x37
     bc8:	00 80       	ld	r0, Z
     bca:	8e a9       	ldd	r24, Y+54	; 0x36
     bcc:	9f a9       	ldd	r25, Y+55	; 0x37
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	9f ab       	std	Y+55, r25	; 0x37
     bd2:	8e ab       	std	Y+54, r24	; 0x36
     bd4:	ec a9       	ldd	r30, Y+52	; 0x34
     bd6:	fd a9       	ldd	r31, Y+53	; 0x35
     bd8:	00 82       	st	Z, r0
     bda:	8c a9       	ldd	r24, Y+52	; 0x34
     bdc:	9d a9       	ldd	r25, Y+53	; 0x35
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9d ab       	std	Y+53, r25	; 0x35
     be2:	8c ab       	std	Y+52, r24	; 0x34
     be4:	98 ad       	ldd	r25, Y+56	; 0x38
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	98 af       	std	Y+56, r25	; 0x38
     bea:	e8 ad       	ldd	r30, Y+56	; 0x38
     bec:	ee 23       	and	r30, r30
     bee:	51 f7       	brne	.-44     	; 0xbc4 <main+0x7e>
	Timer_init(&timer_config);
     bf0:	ce 01       	movw	r24, r28
     bf2:	86 96       	adiw	r24, 0x26	; 38
     bf4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Timer_init>

	LCD_init();
     bf8:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <LCD_init>

	initializePassword(); /* initialize first-time password */
     bfc:	0e 94 0c 08 	call	0x1018	; 0x1018 <initializePassword>
	appMainOptions(); /* Display application options */
     c00:	0e 94 f5 07 	call	0xfea	; 0xfea <appMainOptions>

	uint8 receivedByte=0,key=0;
     c04:	1e 8e       	std	Y+30, r1	; 0x1e
     c06:	1d 8e       	std	Y+29, r1	; 0x1d
	while(1){
		key = KEYPAD_getPressedKey();
     c08:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <KEYPAD_getPressedKey>
     c0c:	8d 8f       	std	Y+29, r24	; 0x1d
		if (key == '+') {
     c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c10:	8b 32       	cpi	r24, 0x2B	; 43
     c12:	09 f0       	breq	.+2      	; 0xc16 <main+0xd0>
     c14:	9c c0       	rjmp	.+312    	; 0xd4e <main+0x208>
			LCD_clearScreen();
     c16:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
			LCD_displayString("Enter password");
     c1a:	80 e6       	ldi	r24, 0x60	; 96
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
			getPassword(g_inputPassword);
     c22:	83 e4       	ldi	r24, 0x43	; 67
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	0e 94 49 07 	call	0xe92	; 0xe92 <getPassword>
			UART_sendByte(READY_TO_SEND); /* inform Control ECU to start sending */
     c2a:	85 e1       	ldi	r24, 0x15	; 21
     c2c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
			sendPasswordViaUART(g_inputPassword);
     c30:	83 e4       	ldi	r24, 0x43	; 67
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0e 94 34 09 	call	0x1268	; 0x1268 <sendPasswordViaUART>
			/* inform Control ECU the option that user chose */
			UART_sendByte('+');
     c38:	8b e2       	ldi	r24, 0x2B	; 43
     c3a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>

			/* Control ECU responses [either the password is correct or wrong] */
			receivedByte = UART_recieveByte();
     c3e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
     c42:	8e 8f       	std	Y+30, r24	; 0x1e
			if (receivedByte == UNLOCKING_DOOR) {
     c44:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c46:	85 32       	cpi	r24, 0x25	; 37
     c48:	19 f4       	brne	.+6      	; 0xc50 <main+0x10a>
				DoorOpeningTask(); /* start displaying door status on LCD */
     c4a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DoorOpeningTask>
     c4e:	7c c0       	rjmp	.+248    	; 0xd48 <main+0x202>

			} else if (receivedByte == WRONG_PASSWORD) {
     c50:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c52:	80 33       	cpi	r24, 0x30	; 48
     c54:	09 f0       	breq	.+2      	; 0xc58 <main+0x112>
     c56:	78 c0       	rjmp	.+240    	; 0xd48 <main+0x202>
				LCD_clearScreen();
     c58:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
				LCD_displayString("Wrong password");
     c5c:	8f e6       	ldi	r24, 0x6F	; 111
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e4       	ldi	r25, 0x40	; 64
     c68:	ac e9       	ldi	r26, 0x9C	; 156
     c6a:	b5 e4       	ldi	r27, 0x45	; 69
     c6c:	89 8f       	std	Y+25, r24	; 0x19
     c6e:	9a 8f       	std	Y+26, r25	; 0x1a
     c70:	ab 8f       	std	Y+27, r26	; 0x1b
     c72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c74:	69 8d       	ldd	r22, Y+25	; 0x19
     c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	4a e7       	ldi	r20, 0x7A	; 122
     c82:	53 e4       	ldi	r21, 0x43	; 67
     c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	8d 8b       	std	Y+21, r24	; 0x15
     c8e:	9e 8b       	std	Y+22, r25	; 0x16
     c90:	af 8b       	std	Y+23, r26	; 0x17
     c92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c94:	6d 89       	ldd	r22, Y+21	; 0x15
     c96:	7e 89       	ldd	r23, Y+22	; 0x16
     c98:	8f 89       	ldd	r24, Y+23	; 0x17
     c9a:	98 8d       	ldd	r25, Y+24	; 0x18
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e8       	ldi	r20, 0x80	; 128
     ca2:	5f e3       	ldi	r21, 0x3F	; 63
     ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ca8:	88 23       	and	r24, r24
     caa:	2c f4       	brge	.+10     	; 0xcb6 <main+0x170>
		__ticks = 1;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	9c 8b       	std	Y+20, r25	; 0x14
     cb2:	8b 8b       	std	Y+19, r24	; 0x13
     cb4:	3f c0       	rjmp	.+126    	; 0xd34 <main+0x1ee>
	else if (__tmp > 65535)
     cb6:	6d 89       	ldd	r22, Y+21	; 0x15
     cb8:	7e 89       	ldd	r23, Y+22	; 0x16
     cba:	8f 89       	ldd	r24, Y+23	; 0x17
     cbc:	98 8d       	ldd	r25, Y+24	; 0x18
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	3f ef       	ldi	r19, 0xFF	; 255
     cc2:	4f e7       	ldi	r20, 0x7F	; 127
     cc4:	57 e4       	ldi	r21, 0x47	; 71
     cc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cca:	18 16       	cp	r1, r24
     ccc:	4c f5       	brge	.+82     	; 0xd20 <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cce:	69 8d       	ldd	r22, Y+25	; 0x19
     cd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e2       	ldi	r20, 0x20	; 32
     cdc:	51 e4       	ldi	r21, 0x41	; 65
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	bc 01       	movw	r22, r24
     ce8:	cd 01       	movw	r24, r26
     cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	9c 8b       	std	Y+20, r25	; 0x14
     cf4:	8b 8b       	std	Y+19, r24	; 0x13
     cf6:	0f c0       	rjmp	.+30     	; 0xd16 <main+0x1d0>
     cf8:	89 e1       	ldi	r24, 0x19	; 25
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	9a 8b       	std	Y+18, r25	; 0x12
     cfe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d00:	89 89       	ldd	r24, Y+17	; 0x11
     d02:	9a 89       	ldd	r25, Y+18	; 0x12
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <main+0x1be>
     d08:	9a 8b       	std	Y+18, r25	; 0x12
     d0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0c:	8b 89       	ldd	r24, Y+19	; 0x13
     d0e:	9c 89       	ldd	r25, Y+20	; 0x14
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	9c 8b       	std	Y+20, r25	; 0x14
     d14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d16:	8b 89       	ldd	r24, Y+19	; 0x13
     d18:	9c 89       	ldd	r25, Y+20	; 0x14
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	69 f7       	brne	.-38     	; 0xcf8 <main+0x1b2>
     d1e:	14 c0       	rjmp	.+40     	; 0xd48 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d20:	6d 89       	ldd	r22, Y+21	; 0x15
     d22:	7e 89       	ldd	r23, Y+22	; 0x16
     d24:	8f 89       	ldd	r24, Y+23	; 0x17
     d26:	98 8d       	ldd	r25, Y+24	; 0x18
     d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	9c 8b       	std	Y+20, r25	; 0x14
     d32:	8b 8b       	std	Y+19, r24	; 0x13
     d34:	8b 89       	ldd	r24, Y+19	; 0x13
     d36:	9c 89       	ldd	r25, Y+20	; 0x14
     d38:	98 8b       	std	Y+16, r25	; 0x10
     d3a:	8f 87       	std	Y+15, r24	; 0x0f
     d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d3e:	98 89       	ldd	r25, Y+16	; 0x10
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <main+0x1fa>
     d44:	98 8b       	std	Y+16, r25	; 0x10
     d46:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(DISPLAY_MESSAGE_DELAY);
			}
			appMainOptions(); /* system back to idle & display main options */
     d48:	0e 94 f5 07 	call	0xfea	; 0xfea <appMainOptions>
     d4c:	5d cf       	rjmp	.-326    	; 0xc08 <main+0xc2>


		} else if (key == '-') {
     d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d50:	8d 32       	cpi	r24, 0x2D	; 45
     d52:	09 f0       	breq	.+2      	; 0xd56 <main+0x210>
     d54:	59 cf       	rjmp	.-334    	; 0xc08 <main+0xc2>
			LCD_clearScreen();
     d56:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
			LCD_displayString("Enter current pass");
     d5a:	8e e7       	ldi	r24, 0x7E	; 126
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
			getPassword(g_inputPassword);
     d62:	83 e4       	ldi	r24, 0x43	; 67
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 49 07 	call	0xe92	; 0xe92 <getPassword>
			UART_sendByte(READY_TO_SEND); /* inform Control ECU to start sending */
     d6a:	85 e1       	ldi	r24, 0x15	; 21
     d6c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
			sendPasswordViaUART(g_inputPassword);
     d70:	83 e4       	ldi	r24, 0x43	; 67
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 34 09 	call	0x1268	; 0x1268 <sendPasswordViaUART>

			/* inform Control ECU the option that user chose */
			UART_sendByte(CHANGE_PASSWORD_OPTION);
     d78:	88 e1       	ldi	r24, 0x18	; 24
     d7a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>

			receivedByte = UART_recieveByte();
     d7e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
     d82:	8e 8f       	std	Y+30, r24	; 0x1e
			if (receivedByte == CHANGING_PASSWORD) {
     d84:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d86:	81 33       	cpi	r24, 0x31	; 49
     d88:	29 f4       	brne	.+10     	; 0xd94 <main+0x24e>
				initializePassword();
     d8a:	0e 94 0c 08 	call	0x1018	; 0x1018 <initializePassword>
				LCD_clearScreen();
     d8e:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
     d92:	7c c0       	rjmp	.+248    	; 0xe8c <main+0x346>
			} else if (receivedByte == WRONG_PASSWORD) {
     d94:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d96:	80 33       	cpi	r24, 0x30	; 48
     d98:	09 f0       	breq	.+2      	; 0xd9c <main+0x256>
     d9a:	78 c0       	rjmp	.+240    	; 0xe8c <main+0x346>
				LCD_clearScreen();
     d9c:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
				LCD_displayString("Wrong password");
     da0:	8f e6       	ldi	r24, 0x6F	; 111
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e4       	ldi	r25, 0x40	; 64
     dac:	ac e9       	ldi	r26, 0x9C	; 156
     dae:	b5 e4       	ldi	r27, 0x45	; 69
     db0:	8b 87       	std	Y+11, r24	; 0x0b
     db2:	9c 87       	std	Y+12, r25	; 0x0c
     db4:	ad 87       	std	Y+13, r26	; 0x0d
     db6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dba:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	4a e7       	ldi	r20, 0x7A	; 122
     dc6:	53 e4       	ldi	r21, 0x43	; 67
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	8f 83       	std	Y+7, r24	; 0x07
     dd2:	98 87       	std	Y+8, r25	; 0x08
     dd4:	a9 87       	std	Y+9, r26	; 0x09
     dd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dd8:	6f 81       	ldd	r22, Y+7	; 0x07
     dda:	78 85       	ldd	r23, Y+8	; 0x08
     ddc:	89 85       	ldd	r24, Y+9	; 0x09
     dde:	9a 85       	ldd	r25, Y+10	; 0x0a
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e8       	ldi	r20, 0x80	; 128
     de6:	5f e3       	ldi	r21, 0x3F	; 63
     de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dec:	88 23       	and	r24, r24
     dee:	2c f4       	brge	.+10     	; 0xdfa <main+0x2b4>
		__ticks = 1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	9e 83       	std	Y+6, r25	; 0x06
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	3f c0       	rjmp	.+126    	; 0xe78 <main+0x332>
	else if (__tmp > 65535)
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	3f ef       	ldi	r19, 0xFF	; 255
     e06:	4f e7       	ldi	r20, 0x7F	; 127
     e08:	57 e4       	ldi	r21, 0x47	; 71
     e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e0e:	18 16       	cp	r1, r24
     e10:	4c f5       	brge	.+82     	; 0xe64 <main+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e12:	6b 85       	ldd	r22, Y+11	; 0x0b
     e14:	7c 85       	ldd	r23, Y+12	; 0x0c
     e16:	8d 85       	ldd	r24, Y+13	; 0x0d
     e18:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e2       	ldi	r20, 0x20	; 32
     e20:	51 e4       	ldi	r21, 0x41	; 65
     e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	bc 01       	movw	r22, r24
     e2c:	cd 01       	movw	r24, r26
     e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	9e 83       	std	Y+6, r25	; 0x06
     e38:	8d 83       	std	Y+5, r24	; 0x05
     e3a:	0f c0       	rjmp	.+30     	; 0xe5a <main+0x314>
     e3c:	89 e1       	ldi	r24, 0x19	; 25
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	9c 83       	std	Y+4, r25	; 0x04
     e42:	8b 83       	std	Y+3, r24	; 0x03
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <main+0x302>
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	9e 81       	ldd	r25, Y+6	; 0x06
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	69 f7       	brne	.-38     	; 0xe3c <main+0x2f6>
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <main+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e64:	6f 81       	ldd	r22, Y+7	; 0x07
     e66:	78 85       	ldd	r23, Y+8	; 0x08
     e68:	89 85       	ldd	r24, Y+9	; 0x09
     e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	9e 83       	std	Y+6, r25	; 0x06
     e76:	8d 83       	std	Y+5, r24	; 0x05
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <main+0x33e>
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(DISPLAY_MESSAGE_DELAY);
			}
			appMainOptions();
     e8c:	0e 94 f5 07 	call	0xfea	; 0xfea <appMainOptions>
     e90:	bb ce       	rjmp	.-650    	; 0xc08 <main+0xc2>

00000e92 <getPassword>:

/******************************************************************************
                          * Functions implementations *
******************************************************************************/

void getPassword(uint8 * arrayName){
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	62 97       	sbiw	r28, 0x12	; 18
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	9a 8b       	std	Y+18, r25	; 0x12
     ea8:	89 8b       	std	Y+17, r24	; 0x11
	LCD_moveCursor(1, 0);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_moveCursor>
	uint8 i=0;
     eb2:	18 8a       	std	Y+16, r1	; 0x10
     eb4:	88 c0       	rjmp	.+272    	; 0xfc6 <getPassword+0x134>
	uint8 key;

	while(i!=PASSWORD_LENGTH){
		key = KEYPAD_getPressedKey();
     eb6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <KEYPAD_getPressedKey>
     eba:	8f 87       	std	Y+15, r24	; 0x0f
		if (key >= 0 && key <= 9) {
     ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ebe:	8a 30       	cpi	r24, 0x0A	; 10
     ec0:	80 f4       	brcc	.+32     	; 0xee2 <getPassword+0x50>
			LCD_displayCharacter('*');
     ec2:	8a e2       	ldi	r24, 0x2A	; 42
     ec4:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_displayCharacter>
			*(arrayName + i) = key;
     ec8:	88 89       	ldd	r24, Y+16	; 0x10
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	89 89       	ldd	r24, Y+17	; 0x11
     ed0:	9a 89       	ldd	r25, Y+18	; 0x12
     ed2:	fc 01       	movw	r30, r24
     ed4:	e2 0f       	add	r30, r18
     ed6:	f3 1f       	adc	r31, r19
     ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eda:	80 83       	st	Z, r24
			i++;
     edc:	88 89       	ldd	r24, Y+16	; 0x10
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	88 8b       	std	Y+16, r24	; 0x10
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e8       	ldi	r25, 0x80	; 128
     ee6:	ab e3       	ldi	r26, 0x3B	; 59
     ee8:	b5 e4       	ldi	r27, 0x45	; 69
     eea:	8b 87       	std	Y+11, r24	; 0x0b
     eec:	9c 87       	std	Y+12, r25	; 0x0c
     eee:	ad 87       	std	Y+13, r26	; 0x0d
     ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	4a e7       	ldi	r20, 0x7A	; 122
     f00:	53 e4       	ldi	r21, 0x43	; 67
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	8f 83       	std	Y+7, r24	; 0x07
     f0c:	98 87       	std	Y+8, r25	; 0x08
     f0e:	a9 87       	std	Y+9, r26	; 0x09
     f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f12:	6f 81       	ldd	r22, Y+7	; 0x07
     f14:	78 85       	ldd	r23, Y+8	; 0x08
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f26:	88 23       	and	r24, r24
     f28:	2c f4       	brge	.+10     	; 0xf34 <getPassword+0xa2>
		__ticks = 1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	3f c0       	rjmp	.+126    	; 0xfb2 <getPassword+0x120>
	else if (__tmp > 65535)
     f34:	6f 81       	ldd	r22, Y+7	; 0x07
     f36:	78 85       	ldd	r23, Y+8	; 0x08
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	3f ef       	ldi	r19, 0xFF	; 255
     f40:	4f e7       	ldi	r20, 0x7F	; 127
     f42:	57 e4       	ldi	r21, 0x47	; 71
     f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f48:	18 16       	cp	r1, r24
     f4a:	4c f5       	brge	.+82     	; 0xf9e <getPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f50:	8d 85       	ldd	r24, Y+13	; 0x0d
     f52:	9e 85       	ldd	r25, Y+14	; 0x0e
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <getPassword+0x102>
     f76:	89 e1       	ldi	r24, 0x19	; 25
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <getPassword+0xf0>
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	9e 83       	std	Y+6, r25	; 0x06
     f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	69 f7       	brne	.-38     	; 0xf76 <getPassword+0xe4>
     f9c:	14 c0       	rjmp	.+40     	; 0xfc6 <getPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9e:	6f 81       	ldd	r22, Y+7	; 0x07
     fa0:	78 85       	ldd	r23, Y+8	; 0x08
     fa2:	89 85       	ldd	r24, Y+9	; 0x09
     fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <getPassword+0x12c>
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
void getPassword(uint8 * arrayName){
	LCD_moveCursor(1, 0);
	uint8 i=0;
	uint8 key;

	while(i!=PASSWORD_LENGTH){
     fc6:	88 89       	ldd	r24, Y+16	; 0x10
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	09 f0       	breq	.+2      	; 0xfce <getPassword+0x13c>
     fcc:	74 cf       	rjmp	.-280    	; 0xeb6 <getPassword+0x24>
			*(arrayName + i) = key;
			i++;
		}
		_delay_ms(KEYPAD_INPUT_DELAY);
	}
	key=0;
     fce:	1f 86       	std	Y+15, r1	; 0x0f

	/* stay till user pushes Enter */
	while(KEYPAD_getPressedKey() != 13);
     fd0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <KEYPAD_getPressedKey>
     fd4:	8d 30       	cpi	r24, 0x0D	; 13
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <getPassword+0x13e>
}
     fd8:	62 96       	adiw	r28, 0x12	; 18
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <appMainOptions>:

void appMainOptions(void){
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     ff2:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+: open door");
     ff6:	21 e9       	ldi	r18, 0x91	; 145
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	a9 01       	movw	r20, r18
    1000:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-: change password");
    1004:	2e e9       	ldi	r18, 0x9E	; 158
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	a9 01       	movw	r20, r18
    100e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_displayStringRowColumn>
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <initializePassword>:

void initializePassword(void){
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	2e 97       	sbiw	r28, 0x0e	; 14
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	ba c0       	rjmp	.+372    	; 0x11a2 <initializePassword+0x18a>
	while(g_password_match_status == PASSWORD_MISMATCHED){
		LCD_clearScreen();
    102e:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
		LCD_displayString("Enter a new password");
    1032:	81 eb       	ldi	r24, 0xB1	; 177
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
		LCD_moveCursor(1, 0);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_moveCursor>
		getPassword(g_inputPassword); /* get the password from user */
    1042:	83 e4       	ldi	r24, 0x43	; 67
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	0e 94 49 07 	call	0xe92	; 0xe92 <getPassword>
		UART_sendByte(READY_TO_SEND);
    104a:	85 e1       	ldi	r24, 0x15	; 21
    104c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
		while (UART_recieveByte() != READY_TO_RECEIVE); /* wait for a response */
    1050:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    1054:	86 31       	cpi	r24, 0x16	; 22
    1056:	e1 f7       	brne	.-8      	; 0x1050 <initializePassword+0x38>
		sendPasswordViaUART(g_inputPassword);
    1058:	83 e4       	ldi	r24, 0x43	; 67
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 34 09 	call	0x1268	; 0x1268 <sendPasswordViaUART>

		/* get confirm password from user */
		LCD_clearScreen();
    1060:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Re-enter password");
    1064:	26 ec       	ldi	r18, 0xC6	; 198
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	a9 01       	movw	r20, r18
    106e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_moveCursor>
		getPassword(g_inputPassword);
    107a:	83 e4       	ldi	r24, 0x43	; 67
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	0e 94 49 07 	call	0xe92	; 0xe92 <getPassword>
		UART_sendByte(READY_TO_SEND);
    1082:	85 e1       	ldi	r24, 0x15	; 21
    1084:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
		while (UART_recieveByte() != READY_TO_RECEIVE);
    1088:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    108c:	86 31       	cpi	r24, 0x16	; 22
    108e:	e1 f7       	brne	.-8      	; 0x1088 <initializePassword+0x70>
		sendPasswordViaUART(g_inputPassword);
    1090:	83 e4       	ldi	r24, 0x43	; 67
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	0e 94 34 09 	call	0x1268	; 0x1268 <sendPasswordViaUART>

		/* wait for a response from Control ECU about passwords matching */
		while (UART_recieveByte() != READY_TO_SEND);
    1098:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    109c:	85 31       	cpi	r24, 0x15	; 21
    109e:	e1 f7       	brne	.-8      	; 0x1098 <initializePassword+0x80>
		g_password_match_status = UART_recieveByte();
    10a0:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    10a4:	80 93 3a 01 	sts	0x013A, r24

		if (g_password_match_status == PASSWORD_MISMATCHED){
    10a8:	80 91 3a 01 	lds	r24, 0x013A
    10ac:	88 23       	and	r24, r24
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <initializePassword+0x9a>
    10b0:	78 c0       	rjmp	.+240    	; 0x11a2 <initializePassword+0x18a>
			LCD_clearScreen();
    10b2:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
			LCD_displayString("Passwords mismatch");
    10b6:	88 ed       	ldi	r24, 0xD8	; 216
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e4       	ldi	r25, 0x40	; 64
    10c2:	ac e9       	ldi	r26, 0x9C	; 156
    10c4:	b5 e4       	ldi	r27, 0x45	; 69
    10c6:	8b 87       	std	Y+11, r24	; 0x0b
    10c8:	9c 87       	std	Y+12, r25	; 0x0c
    10ca:	ad 87       	std	Y+13, r26	; 0x0d
    10cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	4a e7       	ldi	r20, 0x7A	; 122
    10dc:	53 e4       	ldi	r21, 0x43	; 67
    10de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	8f 83       	std	Y+7, r24	; 0x07
    10e8:	98 87       	std	Y+8, r25	; 0x08
    10ea:	a9 87       	std	Y+9, r26	; 0x09
    10ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ee:	6f 81       	ldd	r22, Y+7	; 0x07
    10f0:	78 85       	ldd	r23, Y+8	; 0x08
    10f2:	89 85       	ldd	r24, Y+9	; 0x09
    10f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e8       	ldi	r20, 0x80	; 128
    10fc:	5f e3       	ldi	r21, 0x3F	; 63
    10fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1102:	88 23       	and	r24, r24
    1104:	2c f4       	brge	.+10     	; 0x1110 <initializePassword+0xf8>
		__ticks = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	3f c0       	rjmp	.+126    	; 0x118e <initializePassword+0x176>
	else if (__tmp > 65535)
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	3f ef       	ldi	r19, 0xFF	; 255
    111c:	4f e7       	ldi	r20, 0x7F	; 127
    111e:	57 e4       	ldi	r21, 0x47	; 71
    1120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1124:	18 16       	cp	r1, r24
    1126:	4c f5       	brge	.+82     	; 0x117a <initializePassword+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1128:	6b 85       	ldd	r22, Y+11	; 0x0b
    112a:	7c 85       	ldd	r23, Y+12	; 0x0c
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	0f c0       	rjmp	.+30     	; 0x1170 <initializePassword+0x158>
    1152:	89 e1       	ldi	r24, 0x19	; 25
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <initializePassword+0x146>
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	69 f7       	brne	.-38     	; 0x1152 <initializePassword+0x13a>
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <initializePassword+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117a:	6f 81       	ldd	r22, Y+7	; 0x07
    117c:	78 85       	ldd	r23, Y+8	; 0x08
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <initializePassword+0x182>
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(0, 0, "+: open door");
	LCD_displayStringRowColumn(1, 0, "-: change password");
}

void initializePassword(void){
	while(g_password_match_status == PASSWORD_MISMATCHED){
    11a2:	80 91 3a 01 	lds	r24, 0x013A
    11a6:	88 23       	and	r24, r24
    11a8:	09 f4       	brne	.+2      	; 0x11ac <initializePassword+0x194>
    11aa:	41 cf       	rjmp	.-382    	; 0x102e <initializePassword+0x16>
			LCD_clearScreen();
			LCD_displayString("Passwords mismatch");
			_delay_ms(DISPLAY_MESSAGE_DELAY);
		}
	}
	g_password_match_status = PASSWORD_MISMATCHED; /* reset password match to MISMATCH for later usage */
    11ac:	10 92 3a 01 	sts	0x013A, r1
}
    11b0:	2e 96       	adiw	r28, 0x0e	; 14
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <timerCallBack>:

void timerCallBack(void){
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    11ca:	80 91 3b 01 	lds	r24, 0x013B
    11ce:	90 91 3c 01 	lds	r25, 0x013C
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	90 93 3c 01 	sts	0x013C, r25
    11d8:	80 93 3b 01 	sts	0x013B, r24
}
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <DoorOpeningTask>:

void DoorOpeningTask(void){
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
	/* hold the system for 15 seconds & display to user that door is unlocking */
	g_seconds = 0;
    11ea:	10 92 3c 01 	sts	0x013C, r1
    11ee:	10 92 3b 01 	sts	0x013B, r1
	LCD_clearScreen();
    11f2:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Opening the door..");
    11f6:	2b ee       	ldi	r18, 0xEB	; 235
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	a9 01       	movw	r20, r18
    1200:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_displayStringRowColumn>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
    1204:	80 91 3b 01 	lds	r24, 0x013B
    1208:	90 91 3c 01 	lds	r25, 0x013C
    120c:	85 30       	cpi	r24, 0x05	; 5
    120e:	91 05       	cpc	r25, r1
    1210:	c8 f3       	brcs	.-14     	; 0x1204 <DoorOpeningTask+0x22>

	/* let the door be open for 3 seconds */
	g_seconds = 0;
    1212:	10 92 3c 01 	sts	0x013C, r1
    1216:	10 92 3b 01 	sts	0x013B, r1
	LCD_clearScreen();
    121a:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is now open");
    121e:	2e ef       	ldi	r18, 0xFE	; 254
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	a9 01       	movw	r20, r18
    1228:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_displayStringRowColumn>
	while (g_seconds < DOOR_LEFT_OPEN_PERIOD);
    122c:	80 91 3b 01 	lds	r24, 0x013B
    1230:	90 91 3c 01 	lds	r25, 0x013C
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	c8 f3       	brcs	.-14     	; 0x122c <DoorOpeningTask+0x4a>

	/* hold the system for 15 seconds & display to user that door is locking */
	g_seconds = 0;
    123a:	10 92 3c 01 	sts	0x013C, r1
    123e:	10 92 3b 01 	sts	0x013B, r1
	LCD_clearScreen();
    1242:	0e 94 b4 12 	call	0x2568	; 0x2568 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Closing the door..");
    1246:	2f e0       	ldi	r18, 0x0F	; 15
    1248:	31 e0       	ldi	r19, 0x01	; 1
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_displayStringRowColumn>
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
    1254:	80 91 3b 01 	lds	r24, 0x013B
    1258:	90 91 3c 01 	lds	r25, 0x013C
    125c:	85 30       	cpi	r24, 0x05	; 5
    125e:	91 05       	cpc	r25, r1
    1260:	c8 f3       	brcs	.-14     	; 0x1254 <DoorOpeningTask+0x72>
}
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <sendPasswordViaUART>:

void sendPasswordViaUART(uint8 * passwordArray){
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	61 97       	sbiw	r28, 0x11	; 17
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	99 8b       	std	Y+17, r25	; 0x11
    127e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 cnt;
	for (cnt=0;cnt<PASSWORD_LENGTH;cnt++){
    1280:	1f 86       	std	Y+15, r1	; 0x0f
    1282:	80 c0       	rjmp	.+256    	; 0x1384 <sendPasswordViaUART+0x11c>
		UART_sendByte(passwordArray[cnt]);
    1284:	8f 85       	ldd	r24, Y+15	; 0x0f
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	88 89       	ldd	r24, Y+16	; 0x10
    128c:	99 89       	ldd	r25, Y+17	; 0x11
    128e:	fc 01       	movw	r30, r24
    1290:	e2 0f       	add	r30, r18
    1292:	f3 1f       	adc	r31, r19
    1294:	80 81       	ld	r24, Z
    1296:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a8 ec       	ldi	r26, 0xC8	; 200
    12a0:	b2 e4       	ldi	r27, 0x42	; 66
    12a2:	8b 87       	std	Y+11, r24	; 0x0b
    12a4:	9c 87       	std	Y+12, r25	; 0x0c
    12a6:	ad 87       	std	Y+13, r26	; 0x0d
    12a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	4a e7       	ldi	r20, 0x7A	; 122
    12b8:	53 e4       	ldi	r21, 0x43	; 67
    12ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	8f 83       	std	Y+7, r24	; 0x07
    12c4:	98 87       	std	Y+8, r25	; 0x08
    12c6:	a9 87       	std	Y+9, r26	; 0x09
    12c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e8       	ldi	r20, 0x80	; 128
    12d8:	5f e3       	ldi	r21, 0x3F	; 63
    12da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12de:	88 23       	and	r24, r24
    12e0:	2c f4       	brge	.+10     	; 0x12ec <sendPasswordViaUART+0x84>
		__ticks = 1;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <sendPasswordViaUART+0x102>
	else if (__tmp > 65535)
    12ec:	6f 81       	ldd	r22, Y+7	; 0x07
    12ee:	78 85       	ldd	r23, Y+8	; 0x08
    12f0:	89 85       	ldd	r24, Y+9	; 0x09
    12f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	3f ef       	ldi	r19, 0xFF	; 255
    12f8:	4f e7       	ldi	r20, 0x7F	; 127
    12fa:	57 e4       	ldi	r21, 0x47	; 71
    12fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1300:	18 16       	cp	r1, r24
    1302:	4c f5       	brge	.+82     	; 0x1356 <sendPasswordViaUART+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1304:	6b 85       	ldd	r22, Y+11	; 0x0b
    1306:	7c 85       	ldd	r23, Y+12	; 0x0c
    1308:	8d 85       	ldd	r24, Y+13	; 0x0d
    130a:	9e 85       	ldd	r25, Y+14	; 0x0e
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e2       	ldi	r20, 0x20	; 32
    1312:	51 e4       	ldi	r21, 0x41	; 65
    1314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	bc 01       	movw	r22, r24
    131e:	cd 01       	movw	r24, r26
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	0f c0       	rjmp	.+30     	; 0x134c <sendPasswordViaUART+0xe4>
    132e:	89 e1       	ldi	r24, 0x19	; 25
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	8b 83       	std	Y+3, r24	; 0x03
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <sendPasswordViaUART+0xd2>
    133e:	9c 83       	std	Y+4, r25	; 0x04
    1340:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	9e 83       	std	Y+6, r25	; 0x06
    134a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	69 f7       	brne	.-38     	; 0x132e <sendPasswordViaUART+0xc6>
    1354:	14 c0       	rjmp	.+40     	; 0x137e <sendPasswordViaUART+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1356:	6f 81       	ldd	r22, Y+7	; 0x07
    1358:	78 85       	ldd	r23, Y+8	; 0x08
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <sendPasswordViaUART+0x10e>
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
	while (g_seconds < DOOR_UNLOCKING_PERIOD);
}

void sendPasswordViaUART(uint8 * passwordArray){
	uint8 cnt;
	for (cnt=0;cnt<PASSWORD_LENGTH;cnt++){
    137e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	8f 87       	std	Y+15, r24	; 0x0f
    1384:	8f 85       	ldd	r24, Y+15	; 0x0f
    1386:	85 30       	cpi	r24, 0x05	; 5
    1388:	08 f4       	brcc	.+2      	; 0x138c <sendPasswordViaUART+0x124>
    138a:	7c cf       	rjmp	.-264    	; 0x1284 <sendPasswordViaUART+0x1c>
		UART_sendByte(passwordArray[cnt]);
		_delay_ms(100);
	}
}
    138c:	61 96       	adiw	r28, 0x11	; 17
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <GPIO_setupPinDirection+0x6>
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <GPIO_setupPinDirection+0x8>
    13a6:	0f 92       	push	r0
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	6a 83       	std	Y+2, r22	; 0x02
    13b0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	88 30       	cpi	r24, 0x08	; 8
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <GPIO_setupPinDirection+0x1c>
    13b8:	d5 c0       	rjmp	.+426    	; 0x1564 <GPIO_setupPinDirection+0x1c6>
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <GPIO_setupPinDirection+0x24>
    13c0:	d1 c0       	rjmp	.+418    	; 0x1564 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3d 83       	std	Y+5, r19	; 0x05
    13ca:	2c 83       	std	Y+4, r18	; 0x04
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <GPIO_setupPinDirection+0x3a>
    13d6:	43 c0       	rjmp	.+134    	; 0x145e <GPIO_setupPinDirection+0xc0>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <GPIO_setupPinDirection+0x4e>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	71 f0       	breq	.+28     	; 0x1406 <GPIO_setupPinDirection+0x68>
    13ea:	bc c0       	rjmp	.+376    	; 0x1564 <GPIO_setupPinDirection+0x1c6>
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	3d 81       	ldd	r19, Y+5	; 0x05
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <GPIO_setupPinDirection+0x5a>
    13f6:	5f c0       	rjmp	.+190    	; 0x14b6 <GPIO_setupPinDirection+0x118>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <GPIO_setupPinDirection+0x66>
    1402:	85 c0       	rjmp	.+266    	; 0x150e <GPIO_setupPinDirection+0x170>
    1404:	af c0       	rjmp	.+350    	; 0x1564 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	a1 f4       	brne	.+40     	; 0x1434 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    140c:	aa e3       	ldi	r26, 0x3A	; 58
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ea e3       	ldi	r30, 0x3A	; 58
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_setupPinDirection+0x8c>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_setupPinDirection+0x88>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	98 c0       	rjmp	.+304    	; 0x1564 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1434:	aa e3       	ldi	r26, 0x3A	; 58
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ea e3       	ldi	r30, 0x3A	; 58
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_setupPinDirection+0xb4>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_setupPinDirection+0xb0>
    1456:	80 95       	com	r24
    1458:	84 23       	and	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	83 c0       	rjmp	.+262    	; 0x1564 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	a1 f4       	brne	.+40     	; 0x148c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1464:	a7 e3       	ldi	r26, 0x37	; 55
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e7 e3       	ldi	r30, 0x37	; 55
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <GPIO_setupPinDirection+0xe4>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <GPIO_setupPinDirection+0xe0>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	6c c0       	rjmp	.+216    	; 0x1564 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    148c:	a7 e3       	ldi	r26, 0x37	; 55
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e7 e3       	ldi	r30, 0x37	; 55
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <GPIO_setupPinDirection+0x10c>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <GPIO_setupPinDirection+0x108>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	57 c0       	rjmp	.+174    	; 0x1564 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	a1 f4       	brne	.+40     	; 0x14e4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14bc:	a4 e3       	ldi	r26, 0x34	; 52
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e4 e3       	ldi	r30, 0x34	; 52
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <GPIO_setupPinDirection+0x13c>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <GPIO_setupPinDirection+0x138>
    14de:	84 2b       	or	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	40 c0       	rjmp	.+128    	; 0x1564 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14e4:	a4 e3       	ldi	r26, 0x34	; 52
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e4 e3       	ldi	r30, 0x34	; 52
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <GPIO_setupPinDirection+0x164>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <GPIO_setupPinDirection+0x160>
    1506:	80 95       	com	r24
    1508:	84 23       	and	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	2b c0       	rjmp	.+86     	; 0x1564 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	a1 f4       	brne	.+40     	; 0x153c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1514:	a1 e3       	ldi	r26, 0x31	; 49
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e1 e3       	ldi	r30, 0x31	; 49
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <GPIO_setupPinDirection+0x194>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <GPIO_setupPinDirection+0x190>
    1536:	84 2b       	or	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    153c:	a1 e3       	ldi	r26, 0x31	; 49
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e1 e3       	ldi	r30, 0x31	; 49
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_setupPinDirection+0x1bc>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_setupPinDirection+0x1b8>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	2d 97       	sbiw	r28, 0x0d	; 13
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	6a 83       	std	Y+2, r22	; 0x02
    158c:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	85 30       	cpi	r24, 0x05	; 5
    1592:	08 f0       	brcs	.+2      	; 0x1596 <GPIO_writePin+0x22>
    1594:	db c0       	rjmp	.+438    	; 0x174c <GPIO_writePin+0x1d8>
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	89 30       	cpi	r24, 0x09	; 9
    159a:	08 f0       	brcs	.+2      	; 0x159e <GPIO_writePin+0x2a>
    159c:	d7 c0       	rjmp	.+430    	; 0x174c <GPIO_writePin+0x1d8>
		/*do nothing*/
	}
	else{
		switch (port_num) {
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	3d 87       	std	Y+13, r19	; 0x0d
    15a6:	2c 87       	std	Y+12, r18	; 0x0c
    15a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    15aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	91 05       	cpc	r25, r1
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <GPIO_writePin+0x40>
    15b2:	44 c0       	rjmp	.+136    	; 0x163c <GPIO_writePin+0xc8>
    15b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b6:	3d 85       	ldd	r19, Y+13	; 0x0d
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	2c f4       	brge	.+10     	; 0x15c8 <GPIO_writePin+0x54>
    15be:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	71 f0       	breq	.+28     	; 0x15e2 <GPIO_writePin+0x6e>
    15c6:	c2 c0       	rjmp	.+388    	; 0x174c <GPIO_writePin+0x1d8>
    15c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <GPIO_writePin+0x60>
    15d2:	62 c0       	rjmp	.+196    	; 0x1698 <GPIO_writePin+0x124>
    15d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	91 05       	cpc	r25, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <GPIO_writePin+0x6c>
    15de:	89 c0       	rjmp	.+274    	; 0x16f2 <GPIO_writePin+0x17e>
    15e0:	b5 c0       	rjmp	.+362    	; 0x174c <GPIO_writePin+0x1d8>
		case PORTA_ID:
			value ? SET_BIT(PORTA, pin_num) : CLEAR_BIT(PORTA, pin_num);
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	88 23       	and	r24, r24
    15e6:	a9 f0       	breq	.+42     	; 0x1612 <GPIO_writePin+0x9e>
    15e8:	ab e3       	ldi	r26, 0x3B	; 59
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	eb e3       	ldi	r30, 0x3B	; 59
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	48 2f       	mov	r20, r24
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <GPIO_writePin+0x92>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <GPIO_writePin+0x8e>
    160a:	84 2b       	or	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	9c 91       	ld	r25, X
    1610:	9d c0       	rjmp	.+314    	; 0x174c <GPIO_writePin+0x1d8>
    1612:	ab e3       	ldi	r26, 0x3B	; 59
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	eb e3       	ldi	r30, 0x3B	; 59
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <GPIO_writePin+0xba>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	2a 95       	dec	r18
    1630:	e2 f7       	brpl	.-8      	; 0x162a <GPIO_writePin+0xb6>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	2c 91       	ld	r18, X
    163a:	88 c0       	rjmp	.+272    	; 0x174c <GPIO_writePin+0x1d8>
			break;
		case PORTB_ID:
			value ? SET_BIT(PORTB, pin_num) : CLEAR_BIT(PORTB, pin_num);
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	88 23       	and	r24, r24
    1640:	a9 f0       	breq	.+42     	; 0x166c <GPIO_writePin+0xf8>
    1642:	a8 e3       	ldi	r26, 0x38	; 56
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e8 e3       	ldi	r30, 0x38	; 56
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <GPIO_writePin+0xec>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <GPIO_writePin+0xe8>
    1664:	84 2b       	or	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	3c 91       	ld	r19, X
    166a:	70 c0       	rjmp	.+224    	; 0x174c <GPIO_writePin+0x1d8>
    166c:	a8 e3       	ldi	r26, 0x38	; 56
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e8 e3       	ldi	r30, 0x38	; 56
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <GPIO_writePin+0x116>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <GPIO_writePin+0x112>
    168e:	80 95       	com	r24
    1690:	84 23       	and	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	8c 91       	ld	r24, X
    1696:	5a c0       	rjmp	.+180    	; 0x174c <GPIO_writePin+0x1d8>
			break;
		case PORTC_ID:
			value ? SET_BIT(PORTC, pin_num) : CLEAR_BIT(PORTC, pin_num);
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	88 23       	and	r24, r24
    169c:	a9 f0       	breq	.+42     	; 0x16c8 <GPIO_writePin+0x154>
    169e:	a5 e3       	ldi	r26, 0x35	; 53
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e5 e3       	ldi	r30, 0x35	; 53
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <GPIO_writePin+0x148>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <GPIO_writePin+0x144>
    16c0:	84 2b       	or	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	9c 91       	ld	r25, X
    16c6:	42 c0       	rjmp	.+132    	; 0x174c <GPIO_writePin+0x1d8>
    16c8:	a5 e3       	ldi	r26, 0x35	; 53
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e5 e3       	ldi	r30, 0x35	; 53
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <GPIO_writePin+0x170>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	2a 95       	dec	r18
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <GPIO_writePin+0x16c>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	2c 91       	ld	r18, X
    16f0:	2d c0       	rjmp	.+90     	; 0x174c <GPIO_writePin+0x1d8>
			break;
		case PORTD_ID:
			value ? SET_BIT(PORTD, pin_num) : CLEAR_BIT(PORTD, pin_num);
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	88 23       	and	r24, r24
    16f6:	a9 f0       	breq	.+42     	; 0x1722 <GPIO_writePin+0x1ae>
    16f8:	a2 e3       	ldi	r26, 0x32	; 50
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e2 e3       	ldi	r30, 0x32	; 50
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GPIO_writePin+0x1a2>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <GPIO_writePin+0x19e>
    171a:	84 2b       	or	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	3c 91       	ld	r19, X
    1720:	15 c0       	rjmp	.+42     	; 0x174c <GPIO_writePin+0x1d8>
    1722:	a2 e3       	ldi	r26, 0x32	; 50
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e2 e3       	ldi	r30, 0x32	; 50
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <GPIO_writePin+0x1cc>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <GPIO_writePin+0x1c8>
    1744:	80 95       	com	r24
    1746:	84 23       	and	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	8c 91       	ld	r24, X
			break;
		}
	}
}
    174c:	2d 96       	adiw	r28, 0x0d	; 13
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <GPIO_readPin+0x6>
    1764:	00 d0       	rcall	.+0      	; 0x1766 <GPIO_readPin+0x8>
    1766:	00 d0       	rcall	.+0      	; 0x1768 <GPIO_readPin+0xa>
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	85 30       	cpi	r24, 0x05	; 5
    1774:	18 f4       	brcc	.+6      	; 0x177c <GPIO_readPin+0x1e>
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	89 30       	cpi	r24, 0x09	; 9
    177a:	10 f0       	brcs	.+4      	; 0x1780 <GPIO_readPin+0x22>
			return LOGIC_LOW;
    177c:	1d 82       	std	Y+5, r1	; 0x05
    177e:	68 c0       	rjmp	.+208    	; 0x1850 <GPIO_readPin+0xf2>
	}
	else{
		switch(port_num){
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3c 83       	std	Y+4, r19	; 0x04
    1788:	2b 83       	std	Y+3, r18	; 0x03
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	39 f1       	breq	.+78     	; 0x17e2 <GPIO_readPin+0x84>
    1794:	2b 81       	ldd	r18, Y+3	; 0x03
    1796:	3c 81       	ldd	r19, Y+4	; 0x04
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <GPIO_readPin+0x4a>
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 f0       	breq	.+24     	; 0x17be <GPIO_readPin+0x60>
    17a6:	53 c0       	rjmp	.+166    	; 0x184e <GPIO_readPin+0xf0>
    17a8:	2b 81       	ldd	r18, Y+3	; 0x03
    17aa:	3c 81       	ldd	r19, Y+4	; 0x04
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	51 f1       	breq	.+84     	; 0x1806 <GPIO_readPin+0xa8>
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	b9 f1       	breq	.+110    	; 0x182a <GPIO_readPin+0xcc>
    17bc:	48 c0       	rjmp	.+144    	; 0x184e <GPIO_readPin+0xf0>
		case PORTA_ID:
			return BIT_IS_SET(PINA,pin_num);
    17be:	e9 e3       	ldi	r30, 0x39	; 57
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_readPin+0x7a>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_readPin+0x76>
    17dc:	84 23       	and	r24, r20
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	37 c0       	rjmp	.+110    	; 0x1850 <GPIO_readPin+0xf2>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num);
    17e2:	e6 e3       	ldi	r30, 0x36	; 54
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <GPIO_readPin+0x9e>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <GPIO_readPin+0x9a>
    1800:	84 23       	and	r24, r20
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	25 c0       	rjmp	.+74     	; 0x1850 <GPIO_readPin+0xf2>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num);
    1806:	e3 e3       	ldi	r30, 0x33	; 51
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_readPin+0xc2>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_readPin+0xbe>
    1824:	84 23       	and	r24, r20
    1826:	8d 83       	std	Y+5, r24	; 0x05
    1828:	13 c0       	rjmp	.+38     	; 0x1850 <GPIO_readPin+0xf2>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num);
    182a:	e0 e3       	ldi	r30, 0x30	; 48
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <GPIO_readPin+0xe6>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <GPIO_readPin+0xe2>
    1848:	84 23       	and	r24, r20
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <GPIO_readPin+0xf2>
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <GPIO_readPin+0xf6>
			break;
		}
	}
}
    1850:	9d 81       	ldd	r25, Y+5	; 0x05
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	26 96       	adiw	r28, 0x06	; 6
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	00 d0       	rcall	.+0      	; 0x186e <GPIO_setupPortDirection+0x6>
    186e:	00 d0       	rcall	.+0      	; 0x1870 <GPIO_setupPortDirection+0x8>
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	90 f5       	brcc	.+100    	; 0x18e2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3c 83       	std	Y+4, r19	; 0x04
    1886:	2b 83       	std	Y+3, r18	; 0x03
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	91 05       	cpc	r25, r1
    1890:	d1 f0       	breq	.+52     	; 0x18c6 <GPIO_setupPortDirection+0x5e>
    1892:	2b 81       	ldd	r18, Y+3	; 0x03
    1894:	3c 81       	ldd	r19, Y+4	; 0x04
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	31 05       	cpc	r19, r1
    189a:	2c f4       	brge	.+10     	; 0x18a6 <GPIO_setupPortDirection+0x3e>
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	61 f0       	breq	.+24     	; 0x18bc <GPIO_setupPortDirection+0x54>
    18a4:	1e c0       	rjmp	.+60     	; 0x18e2 <GPIO_setupPortDirection+0x7a>
    18a6:	2b 81       	ldd	r18, Y+3	; 0x03
    18a8:	3c 81       	ldd	r19, Y+4	; 0x04
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	81 f0       	breq	.+32     	; 0x18d0 <GPIO_setupPortDirection+0x68>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	83 30       	cpi	r24, 0x03	; 3
    18b6:	91 05       	cpc	r25, r1
    18b8:	81 f0       	breq	.+32     	; 0x18da <GPIO_setupPortDirection+0x72>
    18ba:	13 c0       	rjmp	.+38     	; 0x18e2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18bc:	ea e3       	ldi	r30, 0x3A	; 58
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	80 83       	st	Z, r24
    18c4:	0e c0       	rjmp	.+28     	; 0x18e2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18c6:	e7 e3       	ldi	r30, 0x37	; 55
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	80 83       	st	Z, r24
    18ce:	09 c0       	rjmp	.+18     	; 0x18e2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18d0:	e4 e3       	ldi	r30, 0x34	; 52
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	80 83       	st	Z, r24
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    18da:	e1 e3       	ldi	r30, 0x31	; 49
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	80 83       	st	Z, r24
			break;
		}
	}
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <GPIO_writePort+0x6>
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <GPIO_writePort+0x8>
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num > NUM_OF_PORTS){
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	85 30       	cpi	r24, 0x05	; 5
    1904:	90 f5       	brcc	.+100    	; 0x196a <GPIO_writePort+0x7a>
		/*do nothing*/
	}
	else{
		switch(port_num){
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3c 83       	std	Y+4, r19	; 0x04
    190e:	2b 83       	std	Y+3, r18	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	d1 f0       	breq	.+52     	; 0x194e <GPIO_writePort+0x5e>
    191a:	2b 81       	ldd	r18, Y+3	; 0x03
    191c:	3c 81       	ldd	r19, Y+4	; 0x04
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	2c f4       	brge	.+10     	; 0x192e <GPIO_writePort+0x3e>
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	61 f0       	breq	.+24     	; 0x1944 <GPIO_writePort+0x54>
    192c:	1e c0       	rjmp	.+60     	; 0x196a <GPIO_writePort+0x7a>
    192e:	2b 81       	ldd	r18, Y+3	; 0x03
    1930:	3c 81       	ldd	r19, Y+4	; 0x04
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	81 f0       	breq	.+32     	; 0x1958 <GPIO_writePort+0x68>
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	81 f0       	breq	.+32     	; 0x1962 <GPIO_writePort+0x72>
    1942:	13 c0       	rjmp	.+38     	; 0x196a <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1944:	eb e3       	ldi	r30, 0x3B	; 59
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	80 83       	st	Z, r24
    194c:	0e c0       	rjmp	.+28     	; 0x196a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    194e:	e8 e3       	ldi	r30, 0x38	; 56
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	80 83       	st	Z, r24
    1956:	09 c0       	rjmp	.+18     	; 0x196a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1958:	e5 e3       	ldi	r30, 0x35	; 53
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	80 83       	st	Z, r24
    1960:	04 c0       	rjmp	.+8      	; 0x196a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1962:	e2 e3       	ldi	r30, 0x32	; 50
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	80 83       	st	Z, r24
			break;
		}
	}
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	00 d0       	rcall	.+0      	; 0x197e <GPIO_readPort+0x6>
    197e:	00 d0       	rcall	.+0      	; 0x1980 <GPIO_readPort+0x8>
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	89 83       	std	Y+1, r24	; 0x01
	if (port_num > NUM_OF_PORTS ) {
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	85 30       	cpi	r24, 0x05	; 5
    198c:	10 f0       	brcs	.+4      	; 0x1992 <GPIO_readPort+0x1a>
		return 0;
    198e:	1c 82       	std	Y+4, r1	; 0x04
    1990:	34 c0       	rjmp	.+104    	; 0x19fa <GPIO_readPort+0x82>
	} else {
		switch (port_num) {
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	3b 83       	std	Y+3, r19	; 0x03
    199a:	2a 83       	std	Y+2, r18	; 0x02
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	9b 81       	ldd	r25, Y+3	; 0x03
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	91 05       	cpc	r25, r1
    19a4:	d1 f0       	breq	.+52     	; 0x19da <GPIO_readPort+0x62>
    19a6:	2a 81       	ldd	r18, Y+2	; 0x02
    19a8:	3b 81       	ldd	r19, Y+3	; 0x03
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	2c f4       	brge	.+10     	; 0x19ba <GPIO_readPort+0x42>
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	9b 81       	ldd	r25, Y+3	; 0x03
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	61 f0       	breq	.+24     	; 0x19d0 <GPIO_readPort+0x58>
    19b8:	1f c0       	rjmp	.+62     	; 0x19f8 <GPIO_readPort+0x80>
    19ba:	2a 81       	ldd	r18, Y+2	; 0x02
    19bc:	3b 81       	ldd	r19, Y+3	; 0x03
    19be:	22 30       	cpi	r18, 0x02	; 2
    19c0:	31 05       	cpc	r19, r1
    19c2:	81 f0       	breq	.+32     	; 0x19e4 <GPIO_readPort+0x6c>
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	9b 81       	ldd	r25, Y+3	; 0x03
    19c8:	83 30       	cpi	r24, 0x03	; 3
    19ca:	91 05       	cpc	r25, r1
    19cc:	81 f0       	breq	.+32     	; 0x19ee <GPIO_readPort+0x76>
    19ce:	14 c0       	rjmp	.+40     	; 0x19f8 <GPIO_readPort+0x80>
		case PORTA_ID:
			return (PINA & 0xFF);
    19d0:	e9 e3       	ldi	r30, 0x39	; 57
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	90 81       	ld	r25, Z
    19d6:	9c 83       	std	Y+4, r25	; 0x04
    19d8:	10 c0       	rjmp	.+32     	; 0x19fa <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			return (PINB & 0xFF);
    19da:	e6 e3       	ldi	r30, 0x36	; 54
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	20 81       	ld	r18, Z
    19e0:	2c 83       	std	Y+4, r18	; 0x04
    19e2:	0b c0       	rjmp	.+22     	; 0x19fa <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			return (PINC & 0xFF);
    19e4:	e3 e3       	ldi	r30, 0x33	; 51
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	30 81       	ld	r19, Z
    19ea:	3c 83       	std	Y+4, r19	; 0x04
    19ec:	06 c0       	rjmp	.+12     	; 0x19fa <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			return (PIND & 0xFF);
    19ee:	e0 e3       	ldi	r30, 0x30	; 48
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	8c 83       	std	Y+4, r24	; 0x04
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <GPIO_readPort+0x82>
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <GPIO_readPort+0x86>
			break;
		}
	}
}
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	9d 83       	std	Y+5, r25	; 0x05
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <KEYPAD_getPressedKey+0x6>
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1a1c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1a1e:	1b 82       	std	Y+3, r1	; 0x03
    1a20:	43 c0       	rjmp	.+134    	; 0x1aa8 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	0e 94 34 0c 	call	0x1868	; 0x1868 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	98 2f       	mov	r25, r24
    1a2e:	9c 5f       	subi	r25, 0xFC	; 252
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	69 2f       	mov	r22, r25
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9c 01       	movw	r18, r24
    1a42:	2c 5f       	subi	r18, 0xFC	; 252
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <KEYPAD_getPressedKey+0x40>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	2a 95       	dec	r18
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <KEYPAD_getPressedKey+0x3c>
    1a54:	80 95       	com	r24
    1a56:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	69 81       	ldd	r22, Y+1	; 0x01
    1a5c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1a60:	1a 82       	std	Y+2, r1	; 0x02
    1a62:	1c c0       	rjmp	.+56     	; 0x1a9c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	6a 81       	ldd	r22, Y+2	; 0x02
    1a68:	0e 94 af 0b 	call	0x175e	; 0x175e <GPIO_readPin>
    1a6c:	88 23       	and	r24, r24
    1a6e:	99 f4       	brne	.+38     	; 0x1a96 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	98 2f       	mov	r25, r24
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	89 0f       	add	r24, r25
    1a84:	8f 5f       	subi	r24, 0xFF	; 255
    1a86:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	8a 83       	std	Y+2, r24	; 0x02
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	08 f3       	brcs	.-62     	; 0x1a64 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	84 30       	cpi	r24, 0x04	; 4
    1aac:	08 f4       	brcc	.+2      	; 0x1ab0 <KEYPAD_getPressedKey+0xa0>
    1aae:	b9 cf       	rjmp	.-142    	; 0x1a22 <KEYPAD_getPressedKey+0x12>
    1ab0:	b6 cf       	rjmp	.-148    	; 0x1a1e <KEYPAD_getPressedKey+0xe>

00001ab2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <KEYPAD_4x4_adjustKeyNumber+0x8>
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ac0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	3c 83       	std	Y+4, r19	; 0x04
    1aca:	2b 83       	std	Y+3, r18	; 0x03
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	88 30       	cpi	r24, 0x08	; 8
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ad6:	70 c0       	rjmp	.+224    	; 0x1bb8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ada:	3c 81       	ldd	r19, Y+4	; 0x04
    1adc:	29 30       	cpi	r18, 0x09	; 9
    1ade:	31 05       	cpc	r19, r1
    1ae0:	5c f5       	brge	.+86     	; 0x1b38 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	84 30       	cpi	r24, 0x04	; 4
    1ae8:	91 05       	cpc	r25, r1
    1aea:	09 f4       	brne	.+2      	; 0x1aee <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1aec:	59 c0       	rjmp	.+178    	; 0x1ba0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1aee:	2b 81       	ldd	r18, Y+3	; 0x03
    1af0:	3c 81       	ldd	r19, Y+4	; 0x04
    1af2:	25 30       	cpi	r18, 0x05	; 5
    1af4:	31 05       	cpc	r19, r1
    1af6:	9c f4       	brge	.+38     	; 0x1b1e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	91 05       	cpc	r25, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b02:	48 c0       	rjmp	.+144    	; 0x1b94 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	23 30       	cpi	r18, 0x03	; 3
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b0e:	45 c0       	rjmp	.+138    	; 0x1b9a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	91 05       	cpc	r25, r1
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b1a:	39 c0       	rjmp	.+114    	; 0x1b8e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b1c:	67 c0       	rjmp	.+206    	; 0x1bec <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b20:	3c 81       	ldd	r19, Y+4	; 0x04
    1b22:	26 30       	cpi	r18, 0x06	; 6
    1b24:	31 05       	cpc	r19, r1
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b28:	41 c0       	rjmp	.+130    	; 0x1bac <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	87 30       	cpi	r24, 0x07	; 7
    1b30:	91 05       	cpc	r25, r1
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b34:	3e c0       	rjmp	.+124    	; 0x1bb2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b36:	37 c0       	rjmp	.+110    	; 0x1ba6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	2c 30       	cpi	r18, 0x0C	; 12
    1b3e:	31 05       	cpc	r19, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b42:	46 c0       	rjmp	.+140    	; 0x1bd0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	8d 30       	cpi	r24, 0x0D	; 13
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	5c f4       	brge	.+22     	; 0x1b64 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b50:	3c 81       	ldd	r19, Y+4	; 0x04
    1b52:	2a 30       	cpi	r18, 0x0A	; 10
    1b54:	31 05       	cpc	r19, r1
    1b56:	b1 f1       	breq	.+108    	; 0x1bc4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	8b 30       	cpi	r24, 0x0B	; 11
    1b5e:	91 05       	cpc	r25, r1
    1b60:	a4 f5       	brge	.+104    	; 0x1bca <KEYPAD_4x4_adjustKeyNumber+0x118>
    1b62:	2d c0       	rjmp	.+90     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1b64:	2b 81       	ldd	r18, Y+3	; 0x03
    1b66:	3c 81       	ldd	r19, Y+4	; 0x04
    1b68:	2e 30       	cpi	r18, 0x0E	; 14
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	b9 f1       	breq	.+110    	; 0x1bdc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	8e 30       	cpi	r24, 0x0E	; 14
    1b74:	91 05       	cpc	r25, r1
    1b76:	7c f1       	brlt	.+94     	; 0x1bd6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b78:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7c:	2f 30       	cpi	r18, 0x0F	; 15
    1b7e:	31 05       	cpc	r19, r1
    1b80:	79 f1       	breq	.+94     	; 0x1be0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	80 31       	cpi	r24, 0x10	; 16
    1b88:	91 05       	cpc	r25, r1
    1b8a:	69 f1       	breq	.+90     	; 0x1be6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b8c:	2f c0       	rjmp	.+94     	; 0x1bec <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1b8e:	87 e0       	ldi	r24, 0x07	; 7
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	2e c0       	rjmp	.+92     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1b94:	88 e0       	ldi	r24, 0x08	; 8
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	2b c0       	rjmp	.+86     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1b9a:	89 e0       	ldi	r24, 0x09	; 9
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	28 c0       	rjmp	.+80     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ba0:	85 e2       	ldi	r24, 0x25	; 37
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	25 c0       	rjmp	.+74     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ba6:	84 e0       	ldi	r24, 0x04	; 4
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	22 c0       	rjmp	.+68     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1bac:	85 e0       	ldi	r24, 0x05	; 5
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	1f c0       	rjmp	.+62     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1bb2:	86 e0       	ldi	r24, 0x06	; 6
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	1c c0       	rjmp	.+56     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1bb8:	8a e2       	ldi	r24, 0x2A	; 42
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	19 c0       	rjmp	.+50     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	16 c0       	rjmp	.+44     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	13 c0       	rjmp	.+38     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1bca:	83 e0       	ldi	r24, 0x03	; 3
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	10 c0       	rjmp	.+32     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1bd0:	8d e2       	ldi	r24, 0x2D	; 45
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1bd6:	8d e0       	ldi	r24, 0x0D	; 13
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	0a c0       	rjmp	.+20     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1bdc:	19 82       	std	Y+1, r1	; 0x01
    1bde:	08 c0       	rjmp	.+16     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1be0:	8d e3       	ldi	r24, 0x3D	; 61
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	05 c0       	rjmp	.+10     	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1be6:	8b e2       	ldi	r24, 0x2B	; 43
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	6f ef       	ldi	r22, 0xFF	; 255
    1c2a:	0e 94 34 0c 	call	0x1868	; 0x1868 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1c2e:	88 e3       	ldi	r24, 0x38	; 56
    1c30:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c34:	8c e0       	ldi	r24, 0x0C	; 12
    1c36:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_sendCommand>
}
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	ea 97       	sbiw	r28, 0x3a	; 58
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1c5c:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e8       	ldi	r26, 0x80	; 128
    1c78:	bf e3       	ldi	r27, 0x3F	; 63
    1c7a:	8d ab       	std	Y+53, r24	; 0x35
    1c7c:	9e ab       	std	Y+54, r25	; 0x36
    1c7e:	af ab       	std	Y+55, r26	; 0x37
    1c80:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	6d a9       	ldd	r22, Y+53	; 0x35
    1c84:	7e a9       	ldd	r23, Y+54	; 0x36
    1c86:	8f a9       	ldd	r24, Y+55	; 0x37
    1c88:	98 ad       	ldd	r25, Y+56	; 0x38
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4a e7       	ldi	r20, 0x7A	; 122
    1c90:	53 e4       	ldi	r21, 0x43	; 67
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	89 ab       	std	Y+49, r24	; 0x31
    1c9c:	9a ab       	std	Y+50, r25	; 0x32
    1c9e:	ab ab       	std	Y+51, r26	; 0x33
    1ca0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca8:	9c a9       	ldd	r25, Y+52	; 0x34
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	98 ab       	std	Y+48, r25	; 0x30
    1cc0:	8f a7       	std	Y+47, r24	; 0x2f
    1cc2:	3f c0       	rjmp	.+126    	; 0x1d42 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1cc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cca:	9c a9       	ldd	r25, Y+52	; 0x34
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	3f ef       	ldi	r19, 0xFF	; 255
    1cd0:	4f e7       	ldi	r20, 0x7F	; 127
    1cd2:	57 e4       	ldi	r21, 0x47	; 71
    1cd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd8:	18 16       	cp	r1, r24
    1cda:	4c f5       	brge	.+82     	; 0x1d2e <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1cde:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e2       	ldi	r20, 0x20	; 32
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	98 ab       	std	Y+48, r25	; 0x30
    1d02:	8f a7       	std	Y+47, r24	; 0x2f
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <LCD_sendCommand+0xde>
    1d06:	89 e1       	ldi	r24, 0x19	; 25
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9e a7       	std	Y+46, r25	; 0x2e
    1d0c:	8d a7       	std	Y+45, r24	; 0x2d
    1d0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d10:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_sendCommand+0xcc>
    1d16:	9e a7       	std	Y+46, r25	; 0x2e
    1d18:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	98 ab       	std	Y+48, r25	; 0x30
    1d22:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d26:	98 a9       	ldd	r25, Y+48	; 0x30
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <LCD_sendCommand+0xc0>
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d30:	7a a9       	ldd	r23, Y+50	; 0x32
    1d32:	8b a9       	ldd	r24, Y+51	; 0x33
    1d34:	9c a9       	ldd	r25, Y+52	; 0x34
    1d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	98 ab       	std	Y+48, r25	; 0x30
    1d40:	8f a7       	std	Y+47, r24	; 0x2f
    1d42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d44:	98 a9       	ldd	r25, Y+48	; 0x30
    1d46:	9c a7       	std	Y+44, r25	; 0x2c
    1d48:	8b a7       	std	Y+43, r24	; 0x2b
    1d4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_sendCommand+0x108>
    1d52:	9c a7       	std	Y+44, r25	; 0x2c
    1d54:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	62 e0       	ldi	r22, 0x02	; 2
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 e8       	ldi	r26, 0x80	; 128
    1d66:	bf e3       	ldi	r27, 0x3F	; 63
    1d68:	8f a3       	std	Y+39, r24	; 0x27
    1d6a:	98 a7       	std	Y+40, r25	; 0x28
    1d6c:	a9 a7       	std	Y+41, r26	; 0x29
    1d6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d70:	6f a1       	ldd	r22, Y+39	; 0x27
    1d72:	78 a5       	ldd	r23, Y+40	; 0x28
    1d74:	89 a5       	ldd	r24, Y+41	; 0x29
    1d76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	4a e7       	ldi	r20, 0x7A	; 122
    1d7e:	53 e4       	ldi	r21, 0x43	; 67
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8b a3       	std	Y+35, r24	; 0x23
    1d8a:	9c a3       	std	Y+36, r25	; 0x24
    1d8c:	ad a3       	std	Y+37, r26	; 0x25
    1d8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d90:	6b a1       	ldd	r22, Y+35	; 0x23
    1d92:	7c a1       	ldd	r23, Y+36	; 0x24
    1d94:	8d a1       	ldd	r24, Y+37	; 0x25
    1d96:	9e a1       	ldd	r25, Y+38	; 0x26
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f e3       	ldi	r21, 0x3F	; 63
    1da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	2c f4       	brge	.+10     	; 0x1db2 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9a a3       	std	Y+34, r25	; 0x22
    1dae:	89 a3       	std	Y+33, r24	; 0x21
    1db0:	3f c0       	rjmp	.+126    	; 0x1e30 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1db2:	6b a1       	ldd	r22, Y+35	; 0x23
    1db4:	7c a1       	ldd	r23, Y+36	; 0x24
    1db6:	8d a1       	ldd	r24, Y+37	; 0x25
    1db8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	57 e4       	ldi	r21, 0x47	; 71
    1dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc6:	18 16       	cp	r1, r24
    1dc8:	4c f5       	brge	.+82     	; 0x1e1c <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dca:	6f a1       	ldd	r22, Y+39	; 0x27
    1dcc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dce:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9a a3       	std	Y+34, r25	; 0x22
    1df0:	89 a3       	std	Y+33, r24	; 0x21
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <LCD_sendCommand+0x1cc>
    1df4:	89 e1       	ldi	r24, 0x19	; 25
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	98 a3       	std	Y+32, r25	; 0x20
    1dfa:	8f 8f       	std	Y+31, r24	; 0x1f
    1dfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dfe:	98 a1       	ldd	r25, Y+32	; 0x20
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_sendCommand+0x1ba>
    1e04:	98 a3       	std	Y+32, r25	; 0x20
    1e06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e08:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e12:	89 a1       	ldd	r24, Y+33	; 0x21
    1e14:	9a a1       	ldd	r25, Y+34	; 0x22
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <LCD_sendCommand+0x1ae>
    1e1a:	14 c0       	rjmp	.+40     	; 0x1e44 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e20:	8d a1       	ldd	r24, Y+37	; 0x25
    1e22:	9e a1       	ldd	r25, Y+38	; 0x26
    1e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	9a a3       	std	Y+34, r25	; 0x22
    1e2e:	89 a3       	std	Y+33, r24	; 0x21
    1e30:	89 a1       	ldd	r24, Y+33	; 0x21
    1e32:	9a a1       	ldd	r25, Y+34	; 0x22
    1e34:	9e 8f       	std	Y+30, r25	; 0x1e
    1e36:	8d 8f       	std	Y+29, r24	; 0x1d
    1e38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_sendCommand+0x1f6>
    1e40:	9e 8f       	std	Y+30, r25	; 0x1e
    1e42:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	6a ad       	ldd	r22, Y+58	; 0x3a
    1e48:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <GPIO_writePort>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e8       	ldi	r26, 0x80	; 128
    1e52:	bf e3       	ldi	r27, 0x3F	; 63
    1e54:	89 8f       	std	Y+25, r24	; 0x19
    1e56:	9a 8f       	std	Y+26, r25	; 0x1a
    1e58:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a e7       	ldi	r20, 0x7A	; 122
    1e6a:	53 e4       	ldi	r21, 0x43	; 67
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8d 8b       	std	Y+21, r24	; 0x15
    1e76:	9e 8b       	std	Y+22, r25	; 0x16
    1e78:	af 8b       	std	Y+23, r26	; 0x17
    1e7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	98 8d       	ldd	r25, Y+24	; 0x18
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	2c f4       	brge	.+10     	; 0x1e9e <LCD_sendCommand+0x258>
		__ticks = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 8b       	std	Y+20, r25	; 0x14
    1e9a:	8b 8b       	std	Y+19, r24	; 0x13
    1e9c:	3f c0       	rjmp	.+126    	; 0x1f1c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1e9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	4c f5       	brge	.+82     	; 0x1f08 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e2       	ldi	r20, 0x20	; 32
    1ec4:	51 e4       	ldi	r21, 0x41	; 65
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <LCD_sendCommand+0x2b8>
    1ee0:	89 e1       	ldi	r24, 0x19	; 25
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9a 8b       	std	Y+18, r25	; 0x12
    1ee6:	89 8b       	std	Y+17, r24	; 0x11
    1ee8:	89 89       	ldd	r24, Y+17	; 0x11
    1eea:	9a 89       	ldd	r25, Y+18	; 0x12
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <LCD_sendCommand+0x2a6>
    1ef0:	9a 8b       	std	Y+18, r25	; 0x12
    1ef2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <LCD_sendCommand+0x29a>
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9c 8b       	std	Y+20, r25	; 0x14
    1f1a:	8b 8b       	std	Y+19, r24	; 0x13
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	98 8b       	std	Y+16, r25	; 0x10
    1f22:	8f 87       	std	Y+15, r24	; 0x0f
    1f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f26:	98 89       	ldd	r25, Y+16	; 0x10
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <LCD_sendCommand+0x2e2>
    1f2c:	98 8b       	std	Y+16, r25	; 0x10
    1f2e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	62 e0       	ldi	r22, 0x02	; 2
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 e8       	ldi	r26, 0x80	; 128
    1f40:	bf e3       	ldi	r27, 0x3F	; 63
    1f42:	8b 87       	std	Y+11, r24	; 0x0b
    1f44:	9c 87       	std	Y+12, r25	; 0x0c
    1f46:	ad 87       	std	Y+13, r26	; 0x0d
    1f48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a e7       	ldi	r20, 0x7A	; 122
    1f58:	53 e4       	ldi	r21, 0x43	; 67
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8f 83       	std	Y+7, r24	; 0x07
    1f64:	98 87       	std	Y+8, r25	; 0x08
    1f66:	a9 87       	std	Y+9, r26	; 0x09
    1f68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <LCD_sendCommand+0x346>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_sendCommand+0x3a6>
    1fce:	89 e1       	ldi	r24, 0x19	; 25
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_sendCommand+0x394>
    1fde:	9c 83       	std	Y+4, r25	; 0x04
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <LCD_sendCommand+0x388>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <LCD_sendCommand+0x3d0>
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    201e:	ea 96       	adiw	r28, 0x3a	; 58
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	ea 97       	sbiw	r28, 0x3a	; 58
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2046:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e8       	ldi	r26, 0x80	; 128
    2062:	bf e3       	ldi	r27, 0x3F	; 63
    2064:	8d ab       	std	Y+53, r24	; 0x35
    2066:	9e ab       	std	Y+54, r25	; 0x36
    2068:	af ab       	std	Y+55, r26	; 0x37
    206a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206c:	6d a9       	ldd	r22, Y+53	; 0x35
    206e:	7e a9       	ldd	r23, Y+54	; 0x36
    2070:	8f a9       	ldd	r24, Y+55	; 0x37
    2072:	98 ad       	ldd	r25, Y+56	; 0x38
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a e7       	ldi	r20, 0x7A	; 122
    207a:	53 e4       	ldi	r21, 0x43	; 67
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	89 ab       	std	Y+49, r24	; 0x31
    2086:	9a ab       	std	Y+50, r25	; 0x32
    2088:	ab ab       	std	Y+51, r26	; 0x33
    208a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    208c:	69 a9       	ldd	r22, Y+49	; 0x31
    208e:	7a a9       	ldd	r23, Y+50	; 0x32
    2090:	8b a9       	ldd	r24, Y+51	; 0x33
    2092:	9c a9       	ldd	r25, Y+52	; 0x34
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	2c f4       	brge	.+10     	; 0x20ae <LCD_displayCharacter+0x7e>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	98 ab       	std	Y+48, r25	; 0x30
    20aa:	8f a7       	std	Y+47, r24	; 0x2f
    20ac:	3f c0       	rjmp	.+126    	; 0x212c <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    20ae:	69 a9       	ldd	r22, Y+49	; 0x31
    20b0:	7a a9       	ldd	r23, Y+50	; 0x32
    20b2:	8b a9       	ldd	r24, Y+51	; 0x33
    20b4:	9c a9       	ldd	r25, Y+52	; 0x34
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	4c f5       	brge	.+82     	; 0x2118 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c6:	6d a9       	ldd	r22, Y+53	; 0x35
    20c8:	7e a9       	ldd	r23, Y+54	; 0x36
    20ca:	8f a9       	ldd	r24, Y+55	; 0x37
    20cc:	98 ad       	ldd	r25, Y+56	; 0x38
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	98 ab       	std	Y+48, r25	; 0x30
    20ec:	8f a7       	std	Y+47, r24	; 0x2f
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <LCD_displayCharacter+0xde>
    20f0:	89 e1       	ldi	r24, 0x19	; 25
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9e a7       	std	Y+46, r25	; 0x2e
    20f6:	8d a7       	std	Y+45, r24	; 0x2d
    20f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_displayCharacter+0xcc>
    2100:	9e a7       	std	Y+46, r25	; 0x2e
    2102:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	8f a5       	ldd	r24, Y+47	; 0x2f
    2106:	98 a9       	ldd	r25, Y+48	; 0x30
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	98 ab       	std	Y+48, r25	; 0x30
    210c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2110:	98 a9       	ldd	r25, Y+48	; 0x30
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	69 f7       	brne	.-38     	; 0x20f0 <LCD_displayCharacter+0xc0>
    2116:	14 c0       	rjmp	.+40     	; 0x2140 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2118:	69 a9       	ldd	r22, Y+49	; 0x31
    211a:	7a a9       	ldd	r23, Y+50	; 0x32
    211c:	8b a9       	ldd	r24, Y+51	; 0x33
    211e:	9c a9       	ldd	r25, Y+52	; 0x34
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	98 ab       	std	Y+48, r25	; 0x30
    212a:	8f a7       	std	Y+47, r24	; 0x2f
    212c:	8f a5       	ldd	r24, Y+47	; 0x2f
    212e:	98 a9       	ldd	r25, Y+48	; 0x30
    2130:	9c a7       	std	Y+44, r25	; 0x2c
    2132:	8b a7       	std	Y+43, r24	; 0x2b
    2134:	8b a5       	ldd	r24, Y+43	; 0x2b
    2136:	9c a5       	ldd	r25, Y+44	; 0x2c
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <LCD_displayCharacter+0x108>
    213c:	9c a7       	std	Y+44, r25	; 0x2c
    213e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	62 e0       	ldi	r22, 0x02	; 2
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e8       	ldi	r26, 0x80	; 128
    2150:	bf e3       	ldi	r27, 0x3F	; 63
    2152:	8f a3       	std	Y+39, r24	; 0x27
    2154:	98 a7       	std	Y+40, r25	; 0x28
    2156:	a9 a7       	std	Y+41, r26	; 0x29
    2158:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	6f a1       	ldd	r22, Y+39	; 0x27
    215c:	78 a5       	ldd	r23, Y+40	; 0x28
    215e:	89 a5       	ldd	r24, Y+41	; 0x29
    2160:	9a a5       	ldd	r25, Y+42	; 0x2a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	53 e4       	ldi	r21, 0x43	; 67
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8b a3       	std	Y+35, r24	; 0x23
    2174:	9c a3       	std	Y+36, r25	; 0x24
    2176:	ad a3       	std	Y+37, r26	; 0x25
    2178:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9a a3       	std	Y+34, r25	; 0x22
    2198:	89 a3       	std	Y+33, r24	; 0x21
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    219c:	6b a1       	ldd	r22, Y+35	; 0x23
    219e:	7c a1       	ldd	r23, Y+36	; 0x24
    21a0:	8d a1       	ldd	r24, Y+37	; 0x25
    21a2:	9e a1       	ldd	r25, Y+38	; 0x26
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	6f a1       	ldd	r22, Y+39	; 0x27
    21b6:	78 a5       	ldd	r23, Y+40	; 0x28
    21b8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9a a3       	std	Y+34, r25	; 0x22
    21da:	89 a3       	std	Y+33, r24	; 0x21
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_displayCharacter+0x1cc>
    21de:	89 e1       	ldi	r24, 0x19	; 25
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	98 a3       	std	Y+32, r25	; 0x20
    21e4:	8f 8f       	std	Y+31, r24	; 0x1f
    21e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e8:	98 a1       	ldd	r25, Y+32	; 0x20
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_displayCharacter+0x1ba>
    21ee:	98 a3       	std	Y+32, r25	; 0x20
    21f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	89 a1       	ldd	r24, Y+33	; 0x21
    21f4:	9a a1       	ldd	r25, Y+34	; 0x22
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9a a3       	std	Y+34, r25	; 0x22
    21fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	89 a1       	ldd	r24, Y+33	; 0x21
    21fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_displayCharacter+0x1ae>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6b a1       	ldd	r22, Y+35	; 0x23
    2208:	7c a1       	ldd	r23, Y+36	; 0x24
    220a:	8d a1       	ldd	r24, Y+37	; 0x25
    220c:	9e a1       	ldd	r25, Y+38	; 0x26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9a a3       	std	Y+34, r25	; 0x22
    2218:	89 a3       	std	Y+33, r24	; 0x21
    221a:	89 a1       	ldd	r24, Y+33	; 0x21
    221c:	9a a1       	ldd	r25, Y+34	; 0x22
    221e:	9e 8f       	std	Y+30, r25	; 0x1e
    2220:	8d 8f       	std	Y+29, r24	; 0x1d
    2222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_displayCharacter+0x1f6>
    222a:	9e 8f       	std	Y+30, r25	; 0x1e
    222c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	6a ad       	ldd	r22, Y+58	; 0x3a
    2232:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <GPIO_writePort>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a0 e8       	ldi	r26, 0x80	; 128
    223c:	bf e3       	ldi	r27, 0x3F	; 63
    223e:	89 8f       	std	Y+25, r24	; 0x19
    2240:	9a 8f       	std	Y+26, r25	; 0x1a
    2242:	ab 8f       	std	Y+27, r26	; 0x1b
    2244:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2246:	69 8d       	ldd	r22, Y+25	; 0x19
    2248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4a e7       	ldi	r20, 0x7A	; 122
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8d 8b       	std	Y+21, r24	; 0x15
    2260:	9e 8b       	std	Y+22, r25	; 0x16
    2262:	af 8b       	std	Y+23, r26	; 0x17
    2264:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2266:	6d 89       	ldd	r22, Y+21	; 0x15
    2268:	7e 89       	ldd	r23, Y+22	; 0x16
    226a:	8f 89       	ldd	r24, Y+23	; 0x17
    226c:	98 8d       	ldd	r25, Y+24	; 0x18
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e8       	ldi	r20, 0x80	; 128
    2274:	5f e3       	ldi	r21, 0x3F	; 63
    2276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227a:	88 23       	and	r24, r24
    227c:	2c f4       	brge	.+10     	; 0x2288 <LCD_displayCharacter+0x258>
		__ticks = 1;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	9c 8b       	std	Y+20, r25	; 0x14
    2284:	8b 8b       	std	Y+19, r24	; 0x13
    2286:	3f c0       	rjmp	.+126    	; 0x2306 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2288:	6d 89       	ldd	r22, Y+21	; 0x15
    228a:	7e 89       	ldd	r23, Y+22	; 0x16
    228c:	8f 89       	ldd	r24, Y+23	; 0x17
    228e:	98 8d       	ldd	r25, Y+24	; 0x18
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	3f ef       	ldi	r19, 0xFF	; 255
    2294:	4f e7       	ldi	r20, 0x7F	; 127
    2296:	57 e4       	ldi	r21, 0x47	; 71
    2298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229c:	18 16       	cp	r1, r24
    229e:	4c f5       	brge	.+82     	; 0x22f2 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a0:	69 8d       	ldd	r22, Y+25	; 0x19
    22a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e2       	ldi	r20, 0x20	; 32
    22ae:	51 e4       	ldi	r21, 0x41	; 65
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9c 8b       	std	Y+20, r25	; 0x14
    22c6:	8b 8b       	std	Y+19, r24	; 0x13
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <LCD_displayCharacter+0x2b8>
    22ca:	89 e1       	ldi	r24, 0x19	; 25
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9a 8b       	std	Y+18, r25	; 0x12
    22d0:	89 8b       	std	Y+17, r24	; 0x11
    22d2:	89 89       	ldd	r24, Y+17	; 0x11
    22d4:	9a 89       	ldd	r25, Y+18	; 0x12
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <LCD_displayCharacter+0x2a6>
    22da:	9a 8b       	std	Y+18, r25	; 0x12
    22dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	9c 8b       	std	Y+20, r25	; 0x14
    22e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ea:	9c 89       	ldd	r25, Y+20	; 0x14
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	69 f7       	brne	.-38     	; 0x22ca <LCD_displayCharacter+0x29a>
    22f0:	14 c0       	rjmp	.+40     	; 0x231a <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f2:	6d 89       	ldd	r22, Y+21	; 0x15
    22f4:	7e 89       	ldd	r23, Y+22	; 0x16
    22f6:	8f 89       	ldd	r24, Y+23	; 0x17
    22f8:	98 8d       	ldd	r25, Y+24	; 0x18
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9c 8b       	std	Y+20, r25	; 0x14
    2304:	8b 8b       	std	Y+19, r24	; 0x13
    2306:	8b 89       	ldd	r24, Y+19	; 0x13
    2308:	9c 89       	ldd	r25, Y+20	; 0x14
    230a:	98 8b       	std	Y+16, r25	; 0x10
    230c:	8f 87       	std	Y+15, r24	; 0x0f
    230e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2310:	98 89       	ldd	r25, Y+16	; 0x10
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_displayCharacter+0x2e2>
    2316:	98 8b       	std	Y+16, r25	; 0x10
    2318:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	62 e0       	ldi	r22, 0x02	; 2
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e8       	ldi	r26, 0x80	; 128
    232a:	bf e3       	ldi	r27, 0x3F	; 63
    232c:	8b 87       	std	Y+11, r24	; 0x0b
    232e:	9c 87       	std	Y+12, r25	; 0x0c
    2330:	ad 87       	std	Y+13, r26	; 0x0d
    2332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	6b 85       	ldd	r22, Y+11	; 0x0b
    2336:	7c 85       	ldd	r23, Y+12	; 0x0c
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a e7       	ldi	r20, 0x7A	; 122
    2342:	53 e4       	ldi	r21, 0x43	; 67
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8f 83       	std	Y+7, r24	; 0x07
    234e:	98 87       	std	Y+8, r25	; 0x08
    2350:	a9 87       	std	Y+9, r26	; 0x09
    2352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2354:	6f 81       	ldd	r22, Y+7	; 0x07
    2356:	78 85       	ldd	r23, Y+8	; 0x08
    2358:	89 85       	ldd	r24, Y+9	; 0x09
    235a:	9a 85       	ldd	r25, Y+10	; 0x0a
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <LCD_displayCharacter+0x346>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <LCD_displayCharacter+0x3a6>
    23b8:	89 e1       	ldi	r24, 0x19	; 25
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <LCD_displayCharacter+0x394>
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	9e 81       	ldd	r25, Y+6	; 0x06
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <LCD_displayCharacter+0x388>
    23de:	14 c0       	rjmp	.+40     	; 0x2408 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <LCD_displayCharacter+0x3d0>
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2408:	ea 96       	adiw	r28, 0x3a	; 58
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <LCD_displayString+0x6>
    2420:	0f 92       	push	r0
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	9b 83       	std	Y+3, r25	; 0x03
    2428:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    242a:	19 82       	std	Y+1, r1	; 0x01
    242c:	0e c0       	rjmp	.+28     	; 0x244a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	9b 81       	ldd	r25, Y+3	; 0x03
    2438:	fc 01       	movw	r30, r24
    243a:	e2 0f       	add	r30, r18
    243c:	f3 1f       	adc	r31, r19
    243e:	80 81       	ld	r24, Z
    2440:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_displayCharacter>
		i++;
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	9b 81       	ldd	r25, Y+3	; 0x03
    2454:	fc 01       	movw	r30, r24
    2456:	e2 0f       	add	r30, r18
    2458:	f3 1f       	adc	r31, r19
    245a:	80 81       	ld	r24, Z
    245c:	88 23       	and	r24, r24
    245e:	39 f7       	brne	.-50     	; 0x242e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	00 d0       	rcall	.+0      	; 0x2472 <LCD_moveCursor+0x6>
    2472:	00 d0       	rcall	.+0      	; 0x2474 <LCD_moveCursor+0x8>
    2474:	0f 92       	push	r0
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	8a 83       	std	Y+2, r24	; 0x02
    247c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	3d 83       	std	Y+5, r19	; 0x05
    2486:	2c 83       	std	Y+4, r18	; 0x04
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	9d 81       	ldd	r25, Y+5	; 0x05
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	91 05       	cpc	r25, r1
    2490:	c1 f0       	breq	.+48     	; 0x24c2 <LCD_moveCursor+0x56>
    2492:	2c 81       	ldd	r18, Y+4	; 0x04
    2494:	3d 81       	ldd	r19, Y+5	; 0x05
    2496:	22 30       	cpi	r18, 0x02	; 2
    2498:	31 05       	cpc	r19, r1
    249a:	2c f4       	brge	.+10     	; 0x24a6 <LCD_moveCursor+0x3a>
    249c:	8c 81       	ldd	r24, Y+4	; 0x04
    249e:	9d 81       	ldd	r25, Y+5	; 0x05
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	61 f0       	breq	.+24     	; 0x24bc <LCD_moveCursor+0x50>
    24a4:	19 c0       	rjmp	.+50     	; 0x24d8 <LCD_moveCursor+0x6c>
    24a6:	2c 81       	ldd	r18, Y+4	; 0x04
    24a8:	3d 81       	ldd	r19, Y+5	; 0x05
    24aa:	22 30       	cpi	r18, 0x02	; 2
    24ac:	31 05       	cpc	r19, r1
    24ae:	69 f0       	breq	.+26     	; 0x24ca <LCD_moveCursor+0x5e>
    24b0:	8c 81       	ldd	r24, Y+4	; 0x04
    24b2:	9d 81       	ldd	r25, Y+5	; 0x05
    24b4:	83 30       	cpi	r24, 0x03	; 3
    24b6:	91 05       	cpc	r25, r1
    24b8:	61 f0       	breq	.+24     	; 0x24d2 <LCD_moveCursor+0x66>
    24ba:	0e c0       	rjmp	.+28     	; 0x24d8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	0b c0       	rjmp	.+22     	; 0x24d8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	80 5c       	subi	r24, 0xC0	; 192
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	07 c0       	rjmp	.+14     	; 0x24d8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	80 5f       	subi	r24, 0xF0	; 240
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	03 c0       	rjmp	.+6      	; 0x24d8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	80 5b       	subi	r24, 0xB0	; 176
    24d6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	80 68       	ori	r24, 0x80	; 128
    24dc:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_sendCommand>
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <LCD_displayStringRowColumn+0x6>
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <LCD_displayStringRowColumn+0x8>
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	6a 83       	std	Y+2, r22	; 0x02
    2500:	5c 83       	std	Y+4, r21	; 0x04
    2502:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	6a 81       	ldd	r22, Y+2	; 0x02
    2508:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	62 97       	sbiw	r28, 0x12	; 18
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	9a 8b       	std	Y+18, r25	; 0x12
    2538:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    253a:	89 89       	ldd	r24, Y+17	; 0x11
    253c:	9a 89       	ldd	r25, Y+18	; 0x12
    253e:	9e 01       	movw	r18, r28
    2540:	2f 5f       	subi	r18, 0xFF	; 255
    2542:	3f 4f       	sbci	r19, 0xFF	; 255
    2544:	b9 01       	movw	r22, r18
    2546:	4a e0       	ldi	r20, 0x0A	; 10
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <itoa>
   LCD_displayString(buff); /* Display the string */
    254e:	ce 01       	movw	r24, r28
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_displayString>
}
    2556:	62 96       	adiw	r28, 0x12	; 18
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <LCD_sendCommand>
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <__vector_9>:
/*******************************************************************************/
                                  /* ISRs */
/*******************************************************************************/

/* Timer0 overflow*/
ISR(TIMER0_OVF_vect) {
    257c:	1f 92       	push	r1
    257e:	0f 92       	push	r0
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	0f 92       	push	r0
    2584:	11 24       	eor	r1, r1
    2586:	2f 93       	push	r18
    2588:	3f 93       	push	r19
    258a:	4f 93       	push	r20
    258c:	5f 93       	push	r21
    258e:	6f 93       	push	r22
    2590:	7f 93       	push	r23
    2592:	8f 93       	push	r24
    2594:	9f 93       	push	r25
    2596:	af 93       	push	r26
    2598:	bf 93       	push	r27
    259a:	ef 93       	push	r30
    259c:	ff 93       	push	r31
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    25a6:	80 91 3d 01 	lds	r24, 0x013D
    25aa:	90 91 3e 01 	lds	r25, 0x013E
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	29 f0       	breq	.+10     	; 0x25bc <__vector_9+0x40>
		(*g_Timer0CallBackPtr)();
    25b2:	e0 91 3d 01 	lds	r30, 0x013D
    25b6:	f0 91 3e 01 	lds	r31, 0x013E
    25ba:	09 95       	icall
	}
}
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	ff 91       	pop	r31
    25c2:	ef 91       	pop	r30
    25c4:	bf 91       	pop	r27
    25c6:	af 91       	pop	r26
    25c8:	9f 91       	pop	r25
    25ca:	8f 91       	pop	r24
    25cc:	7f 91       	pop	r23
    25ce:	6f 91       	pop	r22
    25d0:	5f 91       	pop	r21
    25d2:	4f 91       	pop	r20
    25d4:	3f 91       	pop	r19
    25d6:	2f 91       	pop	r18
    25d8:	0f 90       	pop	r0
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	0f 90       	pop	r0
    25de:	1f 90       	pop	r1
    25e0:	18 95       	reti

000025e2 <__vector_19>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
    25e2:	1f 92       	push	r1
    25e4:	0f 92       	push	r0
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	0f 92       	push	r0
    25ea:	11 24       	eor	r1, r1
    25ec:	2f 93       	push	r18
    25ee:	3f 93       	push	r19
    25f0:	4f 93       	push	r20
    25f2:	5f 93       	push	r21
    25f4:	6f 93       	push	r22
    25f6:	7f 93       	push	r23
    25f8:	8f 93       	push	r24
    25fa:	9f 93       	push	r25
    25fc:	af 93       	push	r26
    25fe:	bf 93       	push	r27
    2600:	ef 93       	push	r30
    2602:	ff 93       	push	r31
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    260c:	80 91 3d 01 	lds	r24, 0x013D
    2610:	90 91 3e 01 	lds	r25, 0x013E
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	29 f0       	breq	.+10     	; 0x2622 <__vector_19+0x40>
		(*g_Timer0CallBackPtr)();
    2618:	e0 91 3d 01 	lds	r30, 0x013D
    261c:	f0 91 3e 01 	lds	r31, 0x013E
    2620:	09 95       	icall
	}
}
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	ff 91       	pop	r31
    2628:	ef 91       	pop	r30
    262a:	bf 91       	pop	r27
    262c:	af 91       	pop	r26
    262e:	9f 91       	pop	r25
    2630:	8f 91       	pop	r24
    2632:	7f 91       	pop	r23
    2634:	6f 91       	pop	r22
    2636:	5f 91       	pop	r21
    2638:	4f 91       	pop	r20
    263a:	3f 91       	pop	r19
    263c:	2f 91       	pop	r18
    263e:	0f 90       	pop	r0
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	0f 90       	pop	r0
    2644:	1f 90       	pop	r1
    2646:	18 95       	reti

00002648 <__vector_8>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
    2648:	1f 92       	push	r1
    264a:	0f 92       	push	r0
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	0f 92       	push	r0
    2650:	11 24       	eor	r1, r1
    2652:	2f 93       	push	r18
    2654:	3f 93       	push	r19
    2656:	4f 93       	push	r20
    2658:	5f 93       	push	r21
    265a:	6f 93       	push	r22
    265c:	7f 93       	push	r23
    265e:	8f 93       	push	r24
    2660:	9f 93       	push	r25
    2662:	af 93       	push	r26
    2664:	bf 93       	push	r27
    2666:	ef 93       	push	r30
    2668:	ff 93       	push	r31
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    2672:	80 91 3f 01 	lds	r24, 0x013F
    2676:	90 91 40 01 	lds	r25, 0x0140
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	29 f0       	breq	.+10     	; 0x2688 <__vector_8+0x40>
		(*g_Timer1CallBackPtr)();
    267e:	e0 91 3f 01 	lds	r30, 0x013F
    2682:	f0 91 40 01 	lds	r31, 0x0140
    2686:	09 95       	icall
	}
}
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	ff 91       	pop	r31
    268e:	ef 91       	pop	r30
    2690:	bf 91       	pop	r27
    2692:	af 91       	pop	r26
    2694:	9f 91       	pop	r25
    2696:	8f 91       	pop	r24
    2698:	7f 91       	pop	r23
    269a:	6f 91       	pop	r22
    269c:	5f 91       	pop	r21
    269e:	4f 91       	pop	r20
    26a0:	3f 91       	pop	r19
    26a2:	2f 91       	pop	r18
    26a4:	0f 90       	pop	r0
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	0f 90       	pop	r0
    26aa:	1f 90       	pop	r1
    26ac:	18 95       	reti

000026ae <__vector_6>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
    26ae:	1f 92       	push	r1
    26b0:	0f 92       	push	r0
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	0f 92       	push	r0
    26b6:	11 24       	eor	r1, r1
    26b8:	2f 93       	push	r18
    26ba:	3f 93       	push	r19
    26bc:	4f 93       	push	r20
    26be:	5f 93       	push	r21
    26c0:	6f 93       	push	r22
    26c2:	7f 93       	push	r23
    26c4:	8f 93       	push	r24
    26c6:	9f 93       	push	r25
    26c8:	af 93       	push	r26
    26ca:	bf 93       	push	r27
    26cc:	ef 93       	push	r30
    26ce:	ff 93       	push	r31
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    26d8:	80 91 3f 01 	lds	r24, 0x013F
    26dc:	90 91 40 01 	lds	r25, 0x0140
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	29 f0       	breq	.+10     	; 0x26ee <__vector_6+0x40>
		(*g_Timer1CallBackPtr)();
    26e4:	e0 91 3f 01 	lds	r30, 0x013F
    26e8:	f0 91 40 01 	lds	r31, 0x0140
    26ec:	09 95       	icall
	}
}
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	ff 91       	pop	r31
    26f4:	ef 91       	pop	r30
    26f6:	bf 91       	pop	r27
    26f8:	af 91       	pop	r26
    26fa:	9f 91       	pop	r25
    26fc:	8f 91       	pop	r24
    26fe:	7f 91       	pop	r23
    2700:	6f 91       	pop	r22
    2702:	5f 91       	pop	r21
    2704:	4f 91       	pop	r20
    2706:	3f 91       	pop	r19
    2708:	2f 91       	pop	r18
    270a:	0f 90       	pop	r0
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	0f 90       	pop	r0
    2710:	1f 90       	pop	r1
    2712:	18 95       	reti

00002714 <__vector_4>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
    2714:	1f 92       	push	r1
    2716:	0f 92       	push	r0
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	0f 92       	push	r0
    271c:	11 24       	eor	r1, r1
    271e:	2f 93       	push	r18
    2720:	3f 93       	push	r19
    2722:	4f 93       	push	r20
    2724:	5f 93       	push	r21
    2726:	6f 93       	push	r22
    2728:	7f 93       	push	r23
    272a:	8f 93       	push	r24
    272c:	9f 93       	push	r25
    272e:	af 93       	push	r26
    2730:	bf 93       	push	r27
    2732:	ef 93       	push	r30
    2734:	ff 93       	push	r31
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    273e:	80 91 41 01 	lds	r24, 0x0141
    2742:	90 91 42 01 	lds	r25, 0x0142
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	29 f0       	breq	.+10     	; 0x2754 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    274a:	e0 91 41 01 	lds	r30, 0x0141
    274e:	f0 91 42 01 	lds	r31, 0x0142
    2752:	09 95       	icall
	}
}
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	ff 91       	pop	r31
    275a:	ef 91       	pop	r30
    275c:	bf 91       	pop	r27
    275e:	af 91       	pop	r26
    2760:	9f 91       	pop	r25
    2762:	8f 91       	pop	r24
    2764:	7f 91       	pop	r23
    2766:	6f 91       	pop	r22
    2768:	5f 91       	pop	r21
    276a:	4f 91       	pop	r20
    276c:	3f 91       	pop	r19
    276e:	2f 91       	pop	r18
    2770:	0f 90       	pop	r0
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	0f 90       	pop	r0
    2776:	1f 90       	pop	r1
    2778:	18 95       	reti

0000277a <__vector_3>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
    277a:	1f 92       	push	r1
    277c:	0f 92       	push	r0
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	0f 92       	push	r0
    2782:	11 24       	eor	r1, r1
    2784:	2f 93       	push	r18
    2786:	3f 93       	push	r19
    2788:	4f 93       	push	r20
    278a:	5f 93       	push	r21
    278c:	6f 93       	push	r22
    278e:	7f 93       	push	r23
    2790:	8f 93       	push	r24
    2792:	9f 93       	push	r25
    2794:	af 93       	push	r26
    2796:	bf 93       	push	r27
    2798:	ef 93       	push	r30
    279a:	ff 93       	push	r31
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    27a4:	80 91 41 01 	lds	r24, 0x0141
    27a8:	90 91 42 01 	lds	r25, 0x0142
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	29 f0       	breq	.+10     	; 0x27ba <__vector_3+0x40>
		(*g_Timer2CallBackPtr)();
    27b0:	e0 91 41 01 	lds	r30, 0x0141
    27b4:	f0 91 42 01 	lds	r31, 0x0142
    27b8:	09 95       	icall
	}
}
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	ff 91       	pop	r31
    27c0:	ef 91       	pop	r30
    27c2:	bf 91       	pop	r27
    27c4:	af 91       	pop	r26
    27c6:	9f 91       	pop	r25
    27c8:	8f 91       	pop	r24
    27ca:	7f 91       	pop	r23
    27cc:	6f 91       	pop	r22
    27ce:	5f 91       	pop	r21
    27d0:	4f 91       	pop	r20
    27d2:	3f 91       	pop	r19
    27d4:	2f 91       	pop	r18
    27d6:	0f 90       	pop	r0
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	0f 90       	pop	r0
    27dc:	1f 90       	pop	r1
    27de:	18 95       	reti

000027e0 <Timer_init>:

/*******************************************************************************/
                         /* Functions Implementation */
/*******************************************************************************/

void Timer_init(const Timer_configuration *timer_config){
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <Timer_init+0x6>
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
    27ee:	e9 81       	ldd	r30, Y+1	; 0x01
    27f0:	fa 81       	ldd	r31, Y+2	; 0x02
    27f2:	80 81       	ld	r24, Z
    27f4:	88 23       	and	r24, r24
    27f6:	09 f0       	breq	.+2      	; 0x27fa <Timer_init+0x1a>
    27f8:	59 c0       	rjmp	.+178    	; 0x28ac <Timer_init+0xcc>
		/* starting with adjusting common bits for the timer, then mode-specific bits */

		SET_BIT(TCCR0,FOC0); /* for non-PWM */
    27fa:	a3 e5       	ldi	r26, 0x53	; 83
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e3 e5       	ldi	r30, 0x53	; 83
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 68       	ori	r24, 0x80	; 128
    2806:	8c 93       	st	X, r24
		TCNT0 = timer_config->initialValue;
    2808:	a2 e5       	ldi	r26, 0x52	; 82
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e9 81       	ldd	r30, Y+1	; 0x01
    280e:	fa 81       	ldd	r31, Y+2	; 0x02
    2810:	82 81       	ldd	r24, Z+2	; 0x02
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	8c 93       	st	X, r24
		TCCR0 = 0;
    2816:	e3 e5       	ldi	r30, 0x53	; 83
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
    281c:	a3 e5       	ldi	r26, 0x53	; 83
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e3 e5       	ldi	r30, 0x53	; 83
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	90 81       	ld	r25, Z
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	86 81       	ldd	r24, Z+6	; 0x06
    282c:	89 2b       	or	r24, r25
    282e:	8c 93       	st	X, r24

		if (timer_config->mode == Normal){
    2830:	e9 81       	ldd	r30, Y+1	; 0x01
    2832:	fa 81       	ldd	r31, Y+2	; 0x02
    2834:	81 81       	ldd	r24, Z+1	; 0x01
    2836:	88 23       	and	r24, r24
    2838:	79 f4       	brne	.+30     	; 0x2858 <Timer_init+0x78>
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    283a:	a9 e5       	ldi	r26, 0x59	; 89
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e9 e5       	ldi	r30, 0x59	; 89
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	81 60       	ori	r24, 0x01	; 1
    2846:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    2848:	a8 e5       	ldi	r26, 0x58	; 88
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e8 e5       	ldi	r30, 0x58	; 88
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	81 60       	ori	r24, 0x01	; 1
    2854:	8c 93       	st	X, r24
    2856:	21 c0       	rjmp	.+66     	; 0x289a <Timer_init+0xba>

		}else if (timer_config->mode == CTC){
    2858:	e9 81       	ldd	r30, Y+1	; 0x01
    285a:	fa 81       	ldd	r31, Y+2	; 0x02
    285c:	81 81       	ldd	r24, Z+1	; 0x01
    285e:	81 30       	cpi	r24, 0x01	; 1
    2860:	e1 f4       	brne	.+56     	; 0x289a <Timer_init+0xba>
			SET_BIT(TCCR0,WGM01);
    2862:	a3 e5       	ldi	r26, 0x53	; 83
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e3 e5       	ldi	r30, 0x53	; 83
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	88 60       	ori	r24, 0x08	; 8
    286e:	8c 93       	st	X, r24
			OCR0 = timer_config->compareValue;
    2870:	ac e5       	ldi	r26, 0x5C	; 92
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e9 81       	ldd	r30, Y+1	; 0x01
    2876:	fa 81       	ldd	r31, Y+2	; 0x02
    2878:	84 81       	ldd	r24, Z+4	; 0x04
    287a:	95 81       	ldd	r25, Z+5	; 0x05
    287c:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    287e:	a9 e5       	ldi	r26, 0x59	; 89
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e9 e5       	ldi	r30, 0x59	; 89
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	82 60       	ori	r24, 0x02	; 2
    288a:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    288c:	a8 e5       	ldi	r26, 0x58	; 88
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	e8 e5       	ldi	r30, 0x58	; 88
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	82 60       	ori	r24, 0x02	; 2
    2898:	8c 93       	st	X, r24
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */
    289a:	e9 81       	ldd	r30, Y+1	; 0x01
    289c:	fa 81       	ldd	r31, Y+2	; 0x02
    289e:	87 81       	ldd	r24, Z+7	; 0x07
    28a0:	90 85       	ldd	r25, Z+8	; 0x08
    28a2:	90 93 3e 01 	sts	0x013E, r25
    28a6:	80 93 3d 01 	sts	0x013D, r24
    28aa:	c4 c0       	rjmp	.+392    	; 0x2a34 <Timer_init+0x254>


	}else if (timer_config->timer_ID == Timer1){
    28ac:	e9 81       	ldd	r30, Y+1	; 0x01
    28ae:	fa 81       	ldd	r31, Y+2	; 0x02
    28b0:	80 81       	ld	r24, Z
    28b2:	81 30       	cpi	r24, 0x01	; 1
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <Timer_init+0xd8>
    28b6:	60 c0       	rjmp	.+192    	; 0x2978 <Timer_init+0x198>
		TCCR1A =0;
    28b8:	ef e4       	ldi	r30, 0x4F	; 79
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    28be:	af e4       	ldi	r26, 0x4F	; 79
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	ef e4       	ldi	r30, 0x4F	; 79
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	88 60       	ori	r24, 0x08	; 8
    28ca:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    28cc:	af e4       	ldi	r26, 0x4F	; 79
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	ef e4       	ldi	r30, 0x4F	; 79
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	84 60       	ori	r24, 0x04	; 4
    28d8:	8c 93       	st	X, r24
		TCCR1B = timer_config->prescaler;
    28da:	ae e4       	ldi	r26, 0x4E	; 78
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e9 81       	ldd	r30, Y+1	; 0x01
    28e0:	fa 81       	ldd	r31, Y+2	; 0x02
    28e2:	86 81       	ldd	r24, Z+6	; 0x06
    28e4:	8c 93       	st	X, r24
		TCNT1 = timer_config->initialValue;
    28e6:	ac e4       	ldi	r26, 0x4C	; 76
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e9 81       	ldd	r30, Y+1	; 0x01
    28ec:	fa 81       	ldd	r31, Y+2	; 0x02
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	11 96       	adiw	r26, 0x01	; 1
    28f4:	9c 93       	st	X, r25
    28f6:	8e 93       	st	-X, r24

		if (timer_config->mode == Normal) {
    28f8:	e9 81       	ldd	r30, Y+1	; 0x01
    28fa:	fa 81       	ldd	r31, Y+2	; 0x02
    28fc:	81 81       	ldd	r24, Z+1	; 0x01
    28fe:	88 23       	and	r24, r24
    2900:	79 f4       	brne	.+30     	; 0x2920 <Timer_init+0x140>
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    2902:	a9 e5       	ldi	r26, 0x59	; 89
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e9 e5       	ldi	r30, 0x59	; 89
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	84 60       	ori	r24, 0x04	; 4
    290e:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    2910:	a8 e5       	ldi	r26, 0x58	; 88
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e8 e5       	ldi	r30, 0x58	; 88
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	84 60       	ori	r24, 0x04	; 4
    291c:	8c 93       	st	X, r24
    291e:	23 c0       	rjmp	.+70     	; 0x2966 <Timer_init+0x186>

		} else if (timer_config->mode == CTC) {
    2920:	e9 81       	ldd	r30, Y+1	; 0x01
    2922:	fa 81       	ldd	r31, Y+2	; 0x02
    2924:	81 81       	ldd	r24, Z+1	; 0x01
    2926:	81 30       	cpi	r24, 0x01	; 1
    2928:	f1 f4       	brne	.+60     	; 0x2966 <Timer_init+0x186>
			SET_BIT(TCCR1B, WGM12);
    292a:	ae e4       	ldi	r26, 0x4E	; 78
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	ee e4       	ldi	r30, 0x4E	; 78
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	88 60       	ori	r24, 0x08	; 8
    2936:	8c 93       	st	X, r24
			OCR1A = timer_config->compareValue;
    2938:	aa e4       	ldi	r26, 0x4A	; 74
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e9 81       	ldd	r30, Y+1	; 0x01
    293e:	fa 81       	ldd	r31, Y+2	; 0x02
    2940:	84 81       	ldd	r24, Z+4	; 0x04
    2942:	95 81       	ldd	r25, Z+5	; 0x05
    2944:	11 96       	adiw	r26, 0x01	; 1
    2946:	9c 93       	st	X, r25
    2948:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    294a:	a9 e5       	ldi	r26, 0x59	; 89
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e9 e5       	ldi	r30, 0x59	; 89
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	80 61       	ori	r24, 0x10	; 16
    2956:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    2958:	a8 e5       	ldi	r26, 0x58	; 88
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e8 e5       	ldi	r30, 0x58	; 88
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	80 61       	ori	r24, 0x10	; 16
    2964:	8c 93       	st	X, r24
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
    2966:	e9 81       	ldd	r30, Y+1	; 0x01
    2968:	fa 81       	ldd	r31, Y+2	; 0x02
    296a:	87 81       	ldd	r24, Z+7	; 0x07
    296c:	90 85       	ldd	r25, Z+8	; 0x08
    296e:	90 93 40 01 	sts	0x0140, r25
    2972:	80 93 3f 01 	sts	0x013F, r24
    2976:	5e c0       	rjmp	.+188    	; 0x2a34 <Timer_init+0x254>


	}else if (timer_config->timer_ID == Timer2){
    2978:	e9 81       	ldd	r30, Y+1	; 0x01
    297a:	fa 81       	ldd	r31, Y+2	; 0x02
    297c:	80 81       	ld	r24, Z
    297e:	82 30       	cpi	r24, 0x02	; 2
    2980:	09 f0       	breq	.+2      	; 0x2984 <Timer_init+0x1a4>
    2982:	58 c0       	rjmp	.+176    	; 0x2a34 <Timer_init+0x254>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    2984:	a5 e4       	ldi	r26, 0x45	; 69
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e5 e4       	ldi	r30, 0x45	; 69
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	80 68       	ori	r24, 0x80	; 128
    2990:	8c 93       	st	X, r24
		TCNT2 = timer_config->initialValue;
    2992:	a4 e4       	ldi	r26, 0x44	; 68
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e9 81       	ldd	r30, Y+1	; 0x01
    2998:	fa 81       	ldd	r31, Y+2	; 0x02
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	93 81       	ldd	r25, Z+3	; 0x03
    299e:	8c 93       	st	X, r24
		TCCR2 = 0;
    29a0:	e5 e4       	ldi	r30, 0x45	; 69
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
    29a6:	a5 e4       	ldi	r26, 0x45	; 69
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e5 e4       	ldi	r30, 0x45	; 69
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	90 81       	ld	r25, Z
    29b0:	e9 81       	ldd	r30, Y+1	; 0x01
    29b2:	fa 81       	ldd	r31, Y+2	; 0x02
    29b4:	86 81       	ldd	r24, Z+6	; 0x06
    29b6:	89 2b       	or	r24, r25
    29b8:	8c 93       	st	X, r24

		if (timer_config->mode == Normal) {
    29ba:	e9 81       	ldd	r30, Y+1	; 0x01
    29bc:	fa 81       	ldd	r31, Y+2	; 0x02
    29be:	81 81       	ldd	r24, Z+1	; 0x01
    29c0:	88 23       	and	r24, r24
    29c2:	79 f4       	brne	.+30     	; 0x29e2 <Timer_init+0x202>
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    29c4:	a9 e5       	ldi	r26, 0x59	; 89
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e9 e5       	ldi	r30, 0x59	; 89
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	80 64       	ori	r24, 0x40	; 64
    29d0:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    29d2:	a8 e5       	ldi	r26, 0x58	; 88
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	e8 e5       	ldi	r30, 0x58	; 88
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	80 64       	ori	r24, 0x40	; 64
    29de:	8c 93       	st	X, r24
    29e0:	21 c0       	rjmp	.+66     	; 0x2a24 <Timer_init+0x244>

		} else if (timer_config->mode == CTC) {
    29e2:	e9 81       	ldd	r30, Y+1	; 0x01
    29e4:	fa 81       	ldd	r31, Y+2	; 0x02
    29e6:	81 81       	ldd	r24, Z+1	; 0x01
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	e1 f4       	brne	.+56     	; 0x2a24 <Timer_init+0x244>
			SET_BIT(TCCR0, WGM21);
    29ec:	a3 e5       	ldi	r26, 0x53	; 83
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e3 e5       	ldi	r30, 0x53	; 83
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	88 60       	ori	r24, 0x08	; 8
    29f8:	8c 93       	st	X, r24
			OCR2 = timer_config->compareValue;
    29fa:	a3 e4       	ldi	r26, 0x43	; 67
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2a00:	fa 81       	ldd	r31, Y+2	; 0x02
    2a02:	84 81       	ldd	r24, Z+4	; 0x04
    2a04:	95 81       	ldd	r25, Z+5	; 0x05
    2a06:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    2a08:	a9 e5       	ldi	r26, 0x59	; 89
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e9 e5       	ldi	r30, 0x59	; 89
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	80 68       	ori	r24, 0x80	; 128
    2a14:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    2a16:	a8 e5       	ldi	r26, 0x58	; 88
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e8 e5       	ldi	r30, 0x58	; 88
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	80 68       	ori	r24, 0x80	; 128
    2a22:	8c 93       	st	X, r24
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
    2a24:	e9 81       	ldd	r30, Y+1	; 0x01
    2a26:	fa 81       	ldd	r31, Y+2	; 0x02
    2a28:	87 81       	ldd	r24, Z+7	; 0x07
    2a2a:	90 85       	ldd	r25, Z+8	; 0x08
    2a2c:	90 93 42 01 	sts	0x0142, r25
    2a30:	80 93 41 01 	sts	0x0141, r24
	}
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <Timer_deInit>:


void Timer_deInit(Timer_ID timer_ID){
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	0f 92       	push	r0
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	88 23       	and	r24, r24
    2a4e:	e1 f4       	brne	.+56     	; 0x2a88 <Timer_deInit+0x4a>
		TCCR0 = 0;
    2a50:	e3 e5       	ldi	r30, 0x53	; 83
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    2a56:	e2 e5       	ldi	r30, 0x52	; 82
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    2a5c:	ec e5       	ldi	r30, 0x5C	; 92
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    2a62:	a9 e5       	ldi	r26, 0x59	; 89
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e9 e5       	ldi	r30, 0x59	; 89
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	8d 7f       	andi	r24, 0xFD	; 253
    2a6e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    2a70:	a9 e5       	ldi	r26, 0x59	; 89
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e9 e5       	ldi	r30, 0x59	; 89
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	8e 7f       	andi	r24, 0xFE	; 254
    2a7c:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    2a7e:	10 92 3e 01 	sts	0x013E, r1
    2a82:	10 92 3d 01 	sts	0x013D, r1
    2a86:	42 c0       	rjmp	.+132    	; 0x2b0c <Timer_deInit+0xce>

	}else if (timer_ID == Timer1){
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	81 30       	cpi	r24, 0x01	; 1
    2a8c:	09 f5       	brne	.+66     	; 0x2ad0 <Timer_deInit+0x92>
		TCCR1A =0;
    2a8e:	ef e4       	ldi	r30, 0x4F	; 79
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    2a94:	ee e4       	ldi	r30, 0x4E	; 78
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	10 82       	st	Z, r1
		TCNT1 = 0;
    2a9a:	ec e4       	ldi	r30, 0x4C	; 76
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	11 82       	std	Z+1, r1	; 0x01
    2aa0:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    2aa2:	a9 e5       	ldi	r26, 0x59	; 89
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e9 e5       	ldi	r30, 0x59	; 89
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	8b 7f       	andi	r24, 0xFB	; 251
    2aae:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    2ab0:	ea e4       	ldi	r30, 0x4A	; 74
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	11 82       	std	Z+1, r1	; 0x01
    2ab6:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    2ab8:	a9 e5       	ldi	r26, 0x59	; 89
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e9 e5       	ldi	r30, 0x59	; 89
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	8f 7e       	andi	r24, 0xEF	; 239
    2ac4:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    2ac6:	10 92 40 01 	sts	0x0140, r1
    2aca:	10 92 3f 01 	sts	0x013F, r1
    2ace:	1e c0       	rjmp	.+60     	; 0x2b0c <Timer_deInit+0xce>

	}else if (timer_ID == Timer2){
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	82 30       	cpi	r24, 0x02	; 2
    2ad4:	d9 f4       	brne	.+54     	; 0x2b0c <Timer_deInit+0xce>
		TCCR2 = 0;
    2ad6:	e5 e4       	ldi	r30, 0x45	; 69
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    2adc:	e4 e4       	ldi	r30, 0x44	; 68
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    2ae2:	e3 e4       	ldi	r30, 0x43	; 67
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    2ae8:	a9 e5       	ldi	r26, 0x59	; 89
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e9 e5       	ldi	r30, 0x59	; 89
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	8f 77       	andi	r24, 0x7F	; 127
    2af4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    2af6:	a9 e5       	ldi	r26, 0x59	; 89
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e9 e5       	ldi	r30, 0x59	; 89
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	8f 7b       	andi	r24, 0xBF	; 191
    2b02:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    2b04:	10 92 42 01 	sts	0x0142, r1
    2b08:	10 92 41 01 	sts	0x0141, r1
	}
}
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_configType * configPtr)
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <UART_init+0x6>
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <UART_init+0x8>
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	9c 83       	std	Y+4, r25	; 0x04
    2b22:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2b24:	1a 82       	std	Y+2, r1	; 0x02
    2b26:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b28:	eb e2       	ldi	r30, 0x2B	; 43
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	82 e0       	ldi	r24, 0x02	; 2
    2b2e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2b30:	ea e2       	ldi	r30, 0x2A	; 42
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	88 e1       	ldi	r24, 0x18	; 24
    2b36:	80 83       	st	Z, r24
	 * UPM1:0  = parity bit
	 * USBS    = stop bit number
	 * UCSZ1:0 = data bits mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= ((configPtr->parityConfig) << UPM0);
    2b38:	a0 e4       	ldi	r26, 0x40	; 64
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e0 e4       	ldi	r30, 0x40	; 64
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	28 2f       	mov	r18, r24
    2b44:	eb 81       	ldd	r30, Y+3	; 0x03
    2b46:	fc 81       	ldd	r31, Y+4	; 0x04
    2b48:	84 81       	ldd	r24, Z+4	; 0x04
    2b4a:	88 2f       	mov	r24, r24
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	82 95       	swap	r24
    2b50:	92 95       	swap	r25
    2b52:	90 7f       	andi	r25, 0xF0	; 240
    2b54:	98 27       	eor	r25, r24
    2b56:	80 7f       	andi	r24, 0xF0	; 240
    2b58:	98 27       	eor	r25, r24
    2b5a:	82 2b       	or	r24, r18
    2b5c:	8c 93       	st	X, r24
	UCSRC |= ((configPtr->stopBitConfig) << USBS);
    2b5e:	a0 e4       	ldi	r26, 0x40	; 64
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e0 e4       	ldi	r30, 0x40	; 64
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	28 2f       	mov	r18, r24
    2b6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6e:	85 81       	ldd	r24, Z+5	; 0x05
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	82 2b       	or	r24, r18
    2b82:	8c 93       	st	X, r24
	
	CLEAR_BIT(UCSRC,UCSZ0);
    2b84:	a0 e4       	ldi	r26, 0x40	; 64
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e0 e4       	ldi	r30, 0x40	; 64
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8d 7f       	andi	r24, 0xFD	; 253
    2b90:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1);
    2b92:	a0 e4       	ldi	r26, 0x40	; 64
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e0 e4       	ldi	r30, 0x40	; 64
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8b 7f       	andi	r24, 0xFB	; 251
    2b9e:	8c 93       	st	X, r24
	if (configPtr->dataType != Data_9_Bits){
    2ba0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba4:	86 81       	ldd	r24, Z+6	; 0x06
    2ba6:	87 30       	cpi	r24, 0x07	; 7
    2ba8:	81 f0       	breq	.+32     	; 0x2bca <UART_init+0xb6>
		UCSRC |= ((configPtr->dataType) << UCSZ0);
    2baa:	a0 e4       	ldi	r26, 0x40	; 64
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e0 e4       	ldi	r30, 0x40	; 64
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bba:	86 81       	ldd	r24, Z+6	; 0x06
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	82 2b       	or	r24, r18
    2bc6:	8c 93       	st	X, r24
    2bc8:	15 c0       	rjmp	.+42     	; 0x2bf4 <UART_init+0xe0>
	}else{
		SET_BIT(UCSRC,UCSZ0);
    2bca:	a0 e4       	ldi	r26, 0x40	; 64
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e0 e4       	ldi	r30, 0x40	; 64
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	82 60       	ori	r24, 0x02	; 2
    2bd6:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2bd8:	a0 e4       	ldi	r26, 0x40	; 64
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e0 e4       	ldi	r30, 0x40	; 64
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	84 60       	ori	r24, 0x04	; 4
    2be4:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    2be6:	aa e2       	ldi	r26, 0x2A	; 42
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	ea e2       	ldi	r30, 0x2A	; 42
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	84 60       	ori	r24, 0x04	; 4
    2bf2:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((configPtr->baud_rate) * 8UL))) - 1);
    2bf4:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf6:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	a2 81       	ldd	r26, Z+2	; 0x02
    2bfe:	b3 81       	ldd	r27, Z+3	; 0x03
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	aa 1f       	adc	r26, r26
    2c06:	bb 1f       	adc	r27, r27
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	aa 1f       	adc	r26, r26
    2c0e:	bb 1f       	adc	r27, r27
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	aa 1f       	adc	r26, r26
    2c16:	bb 1f       	adc	r27, r27
    2c18:	9c 01       	movw	r18, r24
    2c1a:	ad 01       	movw	r20, r26
    2c1c:	80 e4       	ldi	r24, 0x40	; 64
    2c1e:	92 e4       	ldi	r25, 0x42	; 66
    2c20:	af e0       	ldi	r26, 0x0F	; 15
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__udivmodsi4>
    2c2c:	da 01       	movw	r26, r20
    2c2e:	c9 01       	movw	r24, r18
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	9a 83       	std	Y+2, r25	; 0x02
    2c34:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c36:	e0 e4       	ldi	r30, 0x40	; 64
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	89 2f       	mov	r24, r25
    2c40:	99 27       	eor	r25, r25
    2c42:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2c44:	e9 e2       	ldi	r30, 0x29	; 41
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	80 83       	st	Z, r24
}
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	0f 92       	push	r0
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c66:	eb e2       	ldi	r30, 0x2B	; 43
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	80 72       	andi	r24, 0x20	; 32
    2c72:	90 70       	andi	r25, 0x00	; 0
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	b9 f3       	breq	.-18     	; 0x2c66 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c78:	ec e2       	ldi	r30, 0x2C	; 44
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2c80:	0f 90       	pop	r0
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c90:	eb e2       	ldi	r30, 0x2B	; 43
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	88 23       	and	r24, r24
    2c98:	dc f7       	brge	.-10     	; 0x2c90 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2c9a:	ec e2       	ldi	r30, 0x2C	; 44
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
}
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	00 d0       	rcall	.+0      	; 0x2cac <UART_sendString+0x6>
    2cac:	0f 92       	push	r0
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	9b 83       	std	Y+3, r25	; 0x03
    2cb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cb6:	19 82       	std	Y+1, r1	; 0x01
    2cb8:	0e c0       	rjmp	.+28     	; 0x2cd6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	e2 0f       	add	r30, r18
    2cc8:	f3 1f       	adc	r31, r19
    2cca:	80 81       	ld	r24, Z
    2ccc:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
		i++;
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	8f 5f       	subi	r24, 0xFF	; 255
    2cd4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e2 0f       	add	r30, r18
    2ce4:	f3 1f       	adc	r31, r19
    2ce6:	80 81       	ld	r24, Z
    2ce8:	88 23       	and	r24, r24
    2cea:	39 f7       	brne	.-50     	; 0x2cba <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <UART_receiveString+0xa>
    2d02:	0f 92       	push	r0
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	9b 83       	std	Y+3, r25	; 0x03
    2d0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d0c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	9b 81       	ldd	r25, Y+3	; 0x03
    2d18:	8c 01       	movw	r16, r24
    2d1a:	02 0f       	add	r16, r18
    2d1c:	13 1f       	adc	r17, r19
    2d1e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2d22:	f8 01       	movw	r30, r16
    2d24:	80 83       	st	Z, r24
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	9b 81       	ldd	r25, Y+3	; 0x03
    2d38:	8c 01       	movw	r16, r24
    2d3a:	02 0f       	add	r16, r18
    2d3c:	13 1f       	adc	r17, r19
    2d3e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2d42:	f8 01       	movw	r30, r16
    2d44:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	28 2f       	mov	r18, r24
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d50:	fc 01       	movw	r30, r24
    2d52:	e2 0f       	add	r30, r18
    2d54:	f3 1f       	adc	r31, r19
    2d56:	80 81       	ld	r24, Z
    2d58:	83 32       	cpi	r24, 0x23	; 35
    2d5a:	31 f7       	brne	.-52     	; 0x2d28 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	9b 81       	ldd	r25, Y+3	; 0x03
    2d66:	fc 01       	movw	r30, r24
    2d68:	e2 0f       	add	r30, r18
    2d6a:	f3 1f       	adc	r31, r19
    2d6c:	10 82       	st	Z, r1
}
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	08 95       	ret

00002d7e <__udivmodsi4>:
    2d7e:	a1 e2       	ldi	r26, 0x21	; 33
    2d80:	1a 2e       	mov	r1, r26
    2d82:	aa 1b       	sub	r26, r26
    2d84:	bb 1b       	sub	r27, r27
    2d86:	fd 01       	movw	r30, r26
    2d88:	0d c0       	rjmp	.+26     	; 0x2da4 <__udivmodsi4_ep>

00002d8a <__udivmodsi4_loop>:
    2d8a:	aa 1f       	adc	r26, r26
    2d8c:	bb 1f       	adc	r27, r27
    2d8e:	ee 1f       	adc	r30, r30
    2d90:	ff 1f       	adc	r31, r31
    2d92:	a2 17       	cp	r26, r18
    2d94:	b3 07       	cpc	r27, r19
    2d96:	e4 07       	cpc	r30, r20
    2d98:	f5 07       	cpc	r31, r21
    2d9a:	20 f0       	brcs	.+8      	; 0x2da4 <__udivmodsi4_ep>
    2d9c:	a2 1b       	sub	r26, r18
    2d9e:	b3 0b       	sbc	r27, r19
    2da0:	e4 0b       	sbc	r30, r20
    2da2:	f5 0b       	sbc	r31, r21

00002da4 <__udivmodsi4_ep>:
    2da4:	66 1f       	adc	r22, r22
    2da6:	77 1f       	adc	r23, r23
    2da8:	88 1f       	adc	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	1a 94       	dec	r1
    2dae:	69 f7       	brne	.-38     	; 0x2d8a <__udivmodsi4_loop>
    2db0:	60 95       	com	r22
    2db2:	70 95       	com	r23
    2db4:	80 95       	com	r24
    2db6:	90 95       	com	r25
    2db8:	9b 01       	movw	r18, r22
    2dba:	ac 01       	movw	r20, r24
    2dbc:	bd 01       	movw	r22, r26
    2dbe:	cf 01       	movw	r24, r30
    2dc0:	08 95       	ret

00002dc2 <__prologue_saves__>:
    2dc2:	2f 92       	push	r2
    2dc4:	3f 92       	push	r3
    2dc6:	4f 92       	push	r4
    2dc8:	5f 92       	push	r5
    2dca:	6f 92       	push	r6
    2dcc:	7f 92       	push	r7
    2dce:	8f 92       	push	r8
    2dd0:	9f 92       	push	r9
    2dd2:	af 92       	push	r10
    2dd4:	bf 92       	push	r11
    2dd6:	cf 92       	push	r12
    2dd8:	df 92       	push	r13
    2dda:	ef 92       	push	r14
    2ddc:	ff 92       	push	r15
    2dde:	0f 93       	push	r16
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	ca 1b       	sub	r28, r26
    2dec:	db 0b       	sbc	r29, r27
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	09 94       	ijmp

00002dfa <__epilogue_restores__>:
    2dfa:	2a 88       	ldd	r2, Y+18	; 0x12
    2dfc:	39 88       	ldd	r3, Y+17	; 0x11
    2dfe:	48 88       	ldd	r4, Y+16	; 0x10
    2e00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e10:	df 80       	ldd	r13, Y+7	; 0x07
    2e12:	ee 80       	ldd	r14, Y+6	; 0x06
    2e14:	fd 80       	ldd	r15, Y+5	; 0x05
    2e16:	0c 81       	ldd	r16, Y+4	; 0x04
    2e18:	1b 81       	ldd	r17, Y+3	; 0x03
    2e1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e1e:	ce 0f       	add	r28, r30
    2e20:	d1 1d       	adc	r29, r1
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	ed 01       	movw	r28, r26
    2e2e:	08 95       	ret

00002e30 <itoa>:
    2e30:	fb 01       	movw	r30, r22
    2e32:	9f 01       	movw	r18, r30
    2e34:	e8 94       	clt
    2e36:	42 30       	cpi	r20, 0x02	; 2
    2e38:	c4 f0       	brlt	.+48     	; 0x2e6a <itoa+0x3a>
    2e3a:	45 32       	cpi	r20, 0x25	; 37
    2e3c:	b4 f4       	brge	.+44     	; 0x2e6a <itoa+0x3a>
    2e3e:	4a 30       	cpi	r20, 0x0A	; 10
    2e40:	29 f4       	brne	.+10     	; 0x2e4c <itoa+0x1c>
    2e42:	97 fb       	bst	r25, 7
    2e44:	1e f4       	brtc	.+6      	; 0x2e4c <itoa+0x1c>
    2e46:	90 95       	com	r25
    2e48:	81 95       	neg	r24
    2e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4c:	64 2f       	mov	r22, r20
    2e4e:	77 27       	eor	r23, r23
    2e50:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__udivmodhi4>
    2e54:	80 5d       	subi	r24, 0xD0	; 208
    2e56:	8a 33       	cpi	r24, 0x3A	; 58
    2e58:	0c f0       	brlt	.+2      	; 0x2e5c <itoa+0x2c>
    2e5a:	89 5d       	subi	r24, 0xD9	; 217
    2e5c:	81 93       	st	Z+, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	a1 f7       	brne	.-24     	; 0x2e4c <itoa+0x1c>
    2e64:	16 f4       	brtc	.+4      	; 0x2e6a <itoa+0x3a>
    2e66:	5d e2       	ldi	r21, 0x2D	; 45
    2e68:	51 93       	st	Z+, r21
    2e6a:	10 82       	st	Z, r1
    2e6c:	c9 01       	movw	r24, r18
    2e6e:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <strrev>

00002e72 <strrev>:
    2e72:	dc 01       	movw	r26, r24
    2e74:	fc 01       	movw	r30, r24
    2e76:	67 2f       	mov	r22, r23
    2e78:	71 91       	ld	r23, Z+
    2e7a:	77 23       	and	r23, r23
    2e7c:	e1 f7       	brne	.-8      	; 0x2e76 <strrev+0x4>
    2e7e:	32 97       	sbiw	r30, 0x02	; 2
    2e80:	04 c0       	rjmp	.+8      	; 0x2e8a <strrev+0x18>
    2e82:	7c 91       	ld	r23, X
    2e84:	6d 93       	st	X+, r22
    2e86:	70 83       	st	Z, r23
    2e88:	62 91       	ld	r22, -Z
    2e8a:	ae 17       	cp	r26, r30
    2e8c:	bf 07       	cpc	r27, r31
    2e8e:	c8 f3       	brcs	.-14     	; 0x2e82 <strrev+0x10>
    2e90:	08 95       	ret

00002e92 <__udivmodhi4>:
    2e92:	aa 1b       	sub	r26, r26
    2e94:	bb 1b       	sub	r27, r27
    2e96:	51 e1       	ldi	r21, 0x11	; 17
    2e98:	07 c0       	rjmp	.+14     	; 0x2ea8 <__udivmodhi4_ep>

00002e9a <__udivmodhi4_loop>:
    2e9a:	aa 1f       	adc	r26, r26
    2e9c:	bb 1f       	adc	r27, r27
    2e9e:	a6 17       	cp	r26, r22
    2ea0:	b7 07       	cpc	r27, r23
    2ea2:	10 f0       	brcs	.+4      	; 0x2ea8 <__udivmodhi4_ep>
    2ea4:	a6 1b       	sub	r26, r22
    2ea6:	b7 0b       	sbc	r27, r23

00002ea8 <__udivmodhi4_ep>:
    2ea8:	88 1f       	adc	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	5a 95       	dec	r21
    2eae:	a9 f7       	brne	.-22     	; 0x2e9a <__udivmodhi4_loop>
    2eb0:	80 95       	com	r24
    2eb2:	90 95       	com	r25
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	cd 01       	movw	r24, r26
    2eb8:	08 95       	ret

00002eba <_exit>:
    2eba:	f8 94       	cli

00002ebc <__stop_program>:
    2ebc:	ff cf       	rjmp	.-2      	; 0x2ebc <__stop_program>
